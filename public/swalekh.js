var SwalekhWeb=function(n){"use strict";var e;function t(e,t){return e(t={exports:{}},t.exports),t.exports}n=n&&n.hasOwnProperty("default")?n.default:n,e=function(w){w.ui=w.ui||{};w.ui.version="1.12.1";var s,n,x,C,o,a,r,l,c,i,p=0,d=Array.prototype.slice;w.cleanData=(s=w.cleanData,function(e){for(var t,i,n=0;null!=(i=e[n]);n++)try{(t=w._data(i,"events"))&&t.remove&&w(i).triggerHandler("remove")}catch(e){}s(e)}),w.widget=function(e,i,t){var n,s,o,a={},r=e.split(".")[0],l=r+"-"+(e=e.split(".")[1]);return t||(t=i,i=w.Widget),w.isArray(t)&&(t=w.extend.apply(null,[{}].concat(t))),w.expr[":"][l.toLowerCase()]=function(e){return!!w.data(e,l)},w[r]=w[r]||{},n=w[r][e],s=w[r][e]=function(e,t){if(!this._createWidget)return new s(e,t);arguments.length&&this._createWidget(e,t)},w.extend(s,n,{version:t.version,_proto:w.extend({},t),_childConstructors:[]}),(o=new i).options=w.widget.extend({},o.options),w.each(t,function(t,n){function s(){return i.prototype[t].apply(this,arguments)}function o(e){return i.prototype[t].apply(this,e)}w.isFunction(n)?a[t]=function(){var e,t=this._super,i=this._superApply;return this._super=s,this._superApply=o,e=n.apply(this,arguments),this._super=t,this._superApply=i,e}:a[t]=n}),s.prototype=w.widget.extend(o,{widgetEventPrefix:n&&o.widgetEventPrefix||e},a,{constructor:s,namespace:r,widgetName:e,widgetFullName:l}),n?(w.each(n._childConstructors,function(e,t){var i=t.prototype;w.widget(i.namespace+"."+i.widgetName,s,t._proto)}),delete n._childConstructors):i._childConstructors.push(s),w.widget.bridge(e,s),s},w.widget.extend=function(e){for(var t,i,n=d.call(arguments,1),s=0,o=n.length;s<o;s++)for(t in n[s])i=n[s][t],n[s].hasOwnProperty(t)&&void 0!==i&&(w.isPlainObject(i)?e[t]=w.isPlainObject(e[t])?w.widget.extend({},e[t],i):w.widget.extend({},i):e[t]=i);return e},w.widget.bridge=function(o,t){var a=t.prototype.widgetFullName||o;w.fn[o]=function(i){var e="string"==typeof i,n=d.call(arguments,1),s=this;return e?this.length||"instance"!==i?this.each(function(){var e,t=w.data(this,a);return"instance"===i?(s=t,!1):t?w.isFunction(t[i])&&"_"!==i.charAt(0)?(e=t[i].apply(t,n))!==t&&void 0!==e?(s=e&&e.jquery?s.pushStack(e.get()):e,!1):void 0:w.error("no such method '"+i+"' for "+o+" widget instance"):w.error("cannot call methods on "+o+" prior to initialization; attempted to call method '"+i+"'")}):s=void 0:(n.length&&(i=w.widget.extend.apply(null,[i].concat(n))),this.each(function(){var e=w.data(this,a);e?(e.option(i||{}),e._init&&e._init()):w.data(this,a,new t(i,this))})),s}},w.Widget=function(){},w.Widget._childConstructors=[],w.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,t){t=w(t||this.defaultElement||this)[0],this.element=w(t),this.uuid=p++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=w(),this.hoverable=w(),this.focusable=w(),this.classesElementLookup={},t!==this&&(w.data(t,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===t&&this.destroy()}}),this.document=w(t.style?t.ownerDocument:t.document||t),this.window=w(this.document[0].defaultView||this.document[0].parentWindow)),this.options=w.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:w.noop,_create:w.noop,_init:w.noop,destroy:function(){var i=this;this._destroy(),w.each(this.classesElementLookup,function(e,t){i._removeClass(t,e)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:w.noop,widget:function(){return this.element},option:function(e,t){var i,n,s,o=e;if(0===arguments.length)return w.widget.extend({},this.options);if("string"==typeof e)if(o={},e=(i=e.split(".")).shift(),i.length){for(n=o[e]=w.widget.extend({},this.options[e]),s=0;s<i.length-1;s++)n[i[s]]=n[i[s]]||{},n=n[i[s]];if(e=i.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=t}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];o[e]=t}return this._setOptions(o),this},_setOptions:function(e){for(var t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(e){var t,i,n;for(t in e)n=this.classesElementLookup[t],e[t]!==this.options.classes[t]&&n&&n.length&&(i=w(n.get()),this._removeClass(n,t),i.addClass(this._classes({element:i,keys:t,classes:e,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(s){var o=[],a=this;function e(e,t){for(var i,n=0;n<e.length;n++)i=a.classesElementLookup[e[n]]||w(),i=s.add?w(w.unique(i.get().concat(s.element.get()))):w(i.not(s.element).get()),a.classesElementLookup[e[n]]=i,o.push(e[n]),t&&s.classes[e[n]]&&o.push(s.classes[e[n]])}return s=w.extend({element:this.element,classes:this.options.classes||{}},s),this._on(s.element,{remove:"_untrackClassesElement"}),s.keys&&e(s.keys.match(/\S+/g)||[],!0),s.extra&&e(s.extra.match(/\S+/g)||[]),o.join(" ")},_untrackClassesElement:function(i){var n=this;w.each(n.classesElementLookup,function(e,t){-1!==w.inArray(i.target,t)&&(n.classesElementLookup[e]=w(t.not(i.target).get()))})},_removeClass:function(e,t,i){return this._toggleClass(e,t,i,!1)},_addClass:function(e,t,i){return this._toggleClass(e,t,i,!0)},_toggleClass:function(e,t,i,n){var s="string"==typeof e||null===e,t={extra:s?t:i,keys:s?e:t,element:s?this.element:e,add:n="boolean"==typeof n?n:i};return t.element.toggleClass(this._classes(t),n),this},_on:function(s,o,e){var a,r=this;"boolean"!=typeof s&&(e=o,o=s,s=!1),e?(o=a=w(o),this.bindings=this.bindings.add(o)):(e=o,o=this.element,a=this.widget()),w.each(e,function(e,t){function i(){if(s||!0!==r.options.disabled&&!w(this).hasClass("ui-state-disabled"))return("string"==typeof t?r[t]:t).apply(r,arguments)}"string"!=typeof t&&(i.guid=t.guid=t.guid||i.guid||w.guid++);var e=e.match(/^([\w:-]*)\s*(.*)$/),n=e[1]+r.eventNamespace,e=e[2];e?a.on(n,e,i):o.on(n,i)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(t).off(t),this.bindings=w(this.bindings.not(e).get()),this.focusable=w(this.focusable.not(e).get()),this.hoverable=w(this.hoverable.not(e).get())},_delay:function(e,t){var i=this;return setTimeout(function(){return("string"==typeof e?i[e]:e).apply(i,arguments)},t||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(w(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(w(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(w(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(w(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,t,i){var n,s,o=this.options[e];if(i=i||{},(t=w.Event(t)).type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),t.target=this.element[0],s=t.originalEvent)for(n in s)n in t||(t[n]=s[n]);return this.element.trigger(t,i),!(w.isFunction(o)&&!1===o.apply(this.element[0],[t].concat(i))||t.isDefaultPrevented())}},w.each({show:"fadeIn",hide:"fadeOut"},function(o,a){w.Widget.prototype["_"+o]=function(t,e,i){var n=(e="string"==typeof e?{effect:e}:e)?!0!==e&&"number"!=typeof e&&e.effect||a:o,s=!w.isEmptyObject(e="number"==typeof(e=e||{})?{duration:e}:e);e.complete=i,e.delay&&t.delay(e.delay),s&&w.effects&&w.effects.effect[n]?t[o](e):n!==o&&t[n]?t[n](e.duration,e.easing,i):t.queue(function(e){w(this)[o](),i&&i.call(t[0]),e()})}}),w.widget;function _(e,t,i){return[parseFloat(e[0])*(c.test(e[0])?t/100:1),parseFloat(e[1])*(c.test(e[1])?i/100:1)]}function E(e,t){return parseInt(w.css(e,t),10)||0}x=Math.max,C=Math.abs,o=/left|center|right/,a=/top|center|bottom/,r=/[\+\-]\d+(\.[\d]+)?%?/,l=/^\w+/,c=/%$/,i=w.fn.position,w.position={scrollbarWidth:function(){var e,t,i;return void 0!==n?n:(i=(t=w("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>")).children()[0],w("body").append(t),e=i.offsetWidth,t.css("overflow","scroll"),e===(i=i.offsetWidth)&&(i=t[0].clientWidth),t.remove(),n=e-i)},getScrollInfo:function(e){var t=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),i=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),t="scroll"===t||"auto"===t&&e.width<e.element[0].scrollWidth;return{width:"scroll"===i||"auto"===i&&e.height<e.element[0].scrollHeight?w.position.scrollbarWidth():0,height:t?w.position.scrollbarWidth():0}},getWithinInfo:function(e){var t=w(e||window),i=w.isWindow(t[0]),n=!!t[0]&&9===t[0].nodeType;return{element:t,isWindow:i,isDocument:n,offset:!i&&!n?w(e).offset():{left:0,top:0},scrollLeft:t.scrollLeft(),scrollTop:t.scrollTop(),width:t.outerWidth(),height:t.outerHeight()}}},w.fn.position=function(d){if(!d||!d.of)return i.apply(this,arguments);d=w.extend({},d);var h,u,A,f,g,e,m=w(d.of),b=w.position.getWithinInfo(d.within),y=w.position.getScrollInfo(b),v=(d.collision||"flip").split(" "),k={},t=9===(t=(e=m)[0]).nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:w.isWindow(t)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:t.preventDefault?{width:0,height:0,offset:{top:t.pageY,left:t.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()};return m[0].preventDefault&&(d.at="left top"),u=t.width,A=t.height,g=w.extend({},f=t.offset),w.each(["my","at"],function(){var e,t,i=(d[this]||"").split(" ");(i=1===i.length?o.test(i[0])?i.concat(["center"]):a.test(i[0])?["center"].concat(i):["center","center"]:i)[0]=o.test(i[0])?i[0]:"center",i[1]=a.test(i[1])?i[1]:"center",e=r.exec(i[0]),t=r.exec(i[1]),k[this]=[e?e[0]:0,t?t[0]:0],d[this]=[l.exec(i[0])[0],l.exec(i[1])[0]]}),1===v.length&&(v[1]=v[0]),"right"===d.at[0]?g.left+=u:"center"===d.at[0]&&(g.left+=u/2),"bottom"===d.at[1]?g.top+=A:"center"===d.at[1]&&(g.top+=A/2),h=_(k.at,u,A),g.left+=h[0],g.top+=h[1],this.each(function(){var i,e,a=w(this),r=a.outerWidth(),l=a.outerHeight(),t=E(this,"marginLeft"),n=E(this,"marginTop"),s=r+t+E(this,"marginRight")+y.width,o=l+n+E(this,"marginBottom")+y.height,c=w.extend({},g),p=_(k.my,a.outerWidth(),a.outerHeight());"right"===d.my[0]?c.left-=r:"center"===d.my[0]&&(c.left-=r/2),"bottom"===d.my[1]?c.top-=l:"center"===d.my[1]&&(c.top-=l/2),c.left+=p[0],c.top+=p[1],i={marginLeft:t,marginTop:n},w.each(["left","top"],function(e,t){w.ui.position[v[e]]&&w.ui.position[v[e]][t](c,{targetWidth:u,targetHeight:A,elemWidth:r,elemHeight:l,collisionPosition:i,collisionWidth:s,collisionHeight:o,offset:[h[0]+p[0],h[1]+p[1]],my:d.my,at:d.at,within:b,elem:a})}),d.using&&(e=function(e){var t=f.left-c.left,i=t+u-r,n=f.top-c.top,s=n+A-l,o={target:{element:m,left:f.left,top:f.top,width:u,height:A},element:{element:a,left:c.left,top:c.top,width:r,height:l},horizontal:i<0?"left":0<t?"right":"center",vertical:s<0?"top":0<n?"bottom":"middle"};u<r&&C(t+i)<u&&(o.horizontal="center"),A<l&&C(n+s)<A&&(o.vertical="middle"),x(C(t),C(i))>x(C(n),C(s))?o.important="horizontal":o.important="vertical",d.using.call(this,e,o)}),a.offset(w.extend(c,{using:e}))})},w.ui.position={fit:{left:function(e,t){var i,n=t.within,s=n.isWindow?n.scrollLeft:n.offset.left,n=n.width,o=e.left-t.collisionPosition.marginLeft,a=s-o,r=o+t.collisionWidth-n-s;t.collisionWidth>n?0<a&&r<=0?(i=e.left+a+t.collisionWidth-n-s,e.left+=a-i):e.left=!(0<r&&a<=0)&&r<a?s+n-t.collisionWidth:s:0<a?e.left+=a:0<r?e.left-=r:e.left=x(e.left-o,e.left)},top:function(e,t){var i,n=t.within,n=n.isWindow?n.scrollTop:n.offset.top,s=t.within.height,o=e.top-t.collisionPosition.marginTop,a=n-o,r=o+t.collisionHeight-s-n;t.collisionHeight>s?0<a&&r<=0?(i=e.top+a+t.collisionHeight-s-n,e.top+=a-i):e.top=!(0<r&&a<=0)&&r<a?n+s-t.collisionHeight:n:0<a?e.top+=a:0<r?e.top-=r:e.top=x(e.top-o,e.top)}},flip:{left:function(e,t){var i=t.within,n=i.offset.left+i.scrollLeft,s=i.width,i=i.isWindow?i.scrollLeft:i.offset.left,o=e.left-t.collisionPosition.marginLeft,a=o-i,o=o+t.collisionWidth-s-i,r="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,l="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,c=-2*t.offset[0];a<0?((s=e.left+r+l+c+t.collisionWidth-s-n)<0||s<C(a))&&(e.left+=r+l+c):0<o&&(0<(n=e.left-t.collisionPosition.marginLeft+r+l+c-i)||C(n)<o)&&(e.left+=r+l+c)},top:function(e,t){var i=t.within,n=i.offset.top+i.scrollTop,s=i.height,i=i.isWindow?i.scrollTop:i.offset.top,o=e.top-t.collisionPosition.marginTop,a=o-i,o=o+t.collisionHeight-s-i,r="top"===t.my[1]?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,l="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,c=-2*t.offset[1];a<0?((s=e.top+r+l+c+t.collisionHeight-s-n)<0||s<C(a))&&(e.top+=r+l+c):0<o&&(0<(n=e.top-t.collisionPosition.marginTop+r+l+c-i)||C(n)<o)&&(e.top+=r+l+c)}},flipfit:{left:function(){w.ui.position.flip.left.apply(this,arguments),w.ui.position.fit.left.apply(this,arguments)},top:function(){w.ui.position.flip.top.apply(this,arguments),w.ui.position.fit.top.apply(this,arguments)}}};w.ui.position,w.extend(w.expr[":"],{data:w.expr.createPseudo?w.expr.createPseudo(function(t){return function(e){return!!w.data(e,t)}}):function(e,t,i){return!!w.data(e,i[3])}}),w.fn.scrollParent=function(e){var t=this.css("position"),i="absolute"===t,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,e=this.parents().filter(function(){var e=w(this);return(!i||"static"!==e.css("position"))&&n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==t&&e.length?e:w(this[0].ownerDocument||document)},w.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var h=!1;w(document).on("mouseup",function(){h=!1}),w.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.on("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).on("click."+this.widgetName,function(e){if(!0===w.data(e.target,t.widgetName+".preventClickEvent"))return w.removeData(e.target,t.widgetName+".preventClickEvent"),e.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){var t,i,n;if(!h)return this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),i=1===(this._mouseDownEvent=e).which,n=!("string"!=typeof(t=this).options.cancel||!e.target.nodeName)&&w(e.target).closest(this.options.cancel).length,i&&!n&&this._mouseCapture(e)&&(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){t.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(e),!this._mouseStarted)?e.preventDefault():(!0===w.data(e.target,this.widgetName+".preventClickEvent")&&w.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return t._mouseMove(e)},this._mouseUpDelegate=function(e){return t._mouseUp(e)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),h=!0)),!0},_mouseMove:function(e){if(this._mouseMoved){if(w.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,e),this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&w.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,h=!1,e.preventDefault()},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),w.ui.plugin={add:function(e,t,i){var n,s=w.ui[e].prototype;for(n in i)s.plugins[n]=s.plugins[n]||[],s.plugins[n].push([t,i[n]])},call:function(e,t,i,n){var s,o=e.plugins[t];if(o&&(n||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(s=0;s<o.length;s++)e.options[o[s][0]]&&o[s][1].apply(e.element,i)}},w.ui.safeActiveElement=function(t){var i;try{i=t.activeElement}catch(e){i=t.body}return i=(i=i||t.body).nodeName?i:t.body},w.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&w(e).trigger("blur")},w.widget("ui.draggable",w.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(e,t){this._super(e,t),"handle"===e&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(e){var t=this.options;return!(this.helper||t.disabled||0<w(e.target).closest(".ui-resizable-handle").length)&&(this.handle=this._getHandle(e),!!this.handle&&(this._blurActiveElement(e),this._blockFrames(!0===t.iframeFix?"iframe":t.iframeFix),!0))},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=w(this);return w("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var t=w.ui.safeActiveElement(this.document[0]);w(e.target).closest(t).length||w.ui.safeBlur(t)},_mouseStart:function(e){var t=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),w.ui.ddmanager&&(w.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=0<this.helper.parents().filter(function(){return"fixed"===w(this).css("position")}).length,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,t.cursorAt&&this._adjustOffsetFromHelper(t.cursorAt),this._setContainment(),!1===this._trigger("start",e)?(this._clear(),!1):(this._cacheHelperProportions(),w.ui.ddmanager&&!t.dropBehaviour&&w.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),w.ui.ddmanager&&w.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(e){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:e.pageX-this.offset.left,top:e.pageY-this.offset.top}},_mouseDrag:function(e,t){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!t){t=this._uiHash();if(!1===this._trigger("drag",e,t))return this._mouseUp(new w.Event("mouseup",e)),!1;this.position=t.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",w.ui.ddmanager&&w.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var t=this,i=!1;return w.ui.ddmanager&&!this.options.dropBehaviour&&(i=w.ui.ddmanager.drop(this,e)),this.dropped&&(i=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!i||"valid"===this.options.revert&&i||!0===this.options.revert||w.isFunction(this.options.revert)&&this.options.revert.call(this.element,i)?w(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){!1!==t._trigger("stop",e)&&t._clear()}):!1!==this._trigger("stop",e)&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),w.ui.ddmanager&&w.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),w.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new w.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return!this.options.handle||!!w(e.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var t=this.options,i=w.isFunction(t.helper),e=i?w(t.helper.apply(this.element[0],[e])):"clone"===t.helper?this.element.clone().removeAttr("id"):this.element;return e.parents("body").length||e.appendTo("parent"===t.appendTo?this.element[0].parentNode:t.appendTo),i&&e[0]===this.element[0]&&this._setPositionRelative(),e[0]===this.element[0]||/(fixed|absolute)/.test(e.css("position"))||e.css("position","absolute"),e},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),"left"in(e=w.isArray(e)?{left:+e[0],top:+e[1]||0}:e)&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(e){return/(html|body)/i.test(e.tagName)||e===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),t=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==t&&w.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),{top:(e=this._isRootNode(this.offsetParent[0])?{top:0,left:0}:e).top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){var e,t;return"relative"!==this.cssPosition?{top:0,left:0}:(e=this.element.position(),t=this._isRootNode(this.scrollParent[0]),{top:e.top-(parseInt(this.helper.css("top"),10)||0)+(t?0:this.scrollParent.scrollTop()),left:e.left-(parseInt(this.helper.css("left"),10)||0)+(t?0:this.scrollParent.scrollLeft())})},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,t=this.options,i=this.document[0];this.relativeContainer=null,t.containment?"window"===t.containment?this.containment=[w(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,w(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,w(window).scrollLeft()+w(window).width()-this.helperProportions.width-this.margins.left,w(window).scrollTop()+(w(window).height()||i.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:"document"===t.containment?this.containment=[0,0,w(i).width()-this.helperProportions.width-this.margins.left,(w(i).height()||i.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:t.containment.constructor===Array?this.containment=t.containment:("parent"===t.containment&&(t.containment=this.helper[0].parentNode),(t=(i=w(t.containment))[0])&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(t.scrollWidth,t.offsetWidth):t.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(t.scrollHeight,t.offsetHeight):t.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i)):this.containment=null},_convertPositionTo:function(e,t){t=t||this.position;var e="absolute"===e?1:-1,i=this._isRootNode(this.scrollParent[0]);return{top:t.top+this.offset.relative.top*e+this.offset.parent.top*e-("fixed"===this.cssPosition?-this.offset.scroll.top:i?0:this.offset.scroll.top)*e,left:t.left+this.offset.relative.left*e+this.offset.parent.left*e-("fixed"===this.cssPosition?-this.offset.scroll.left:i?0:this.offset.scroll.left)*e}},_generatePosition:function(e,t){var i,n=this.options,s=this._isRootNode(this.scrollParent[0]),o=e.pageX,a=e.pageY;return s&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),t&&(this.containment&&(i=this.relativeContainer?(t=this.relativeContainer.offset(),[this.containment[0]+t.left,this.containment[1]+t.top,this.containment[2]+t.left,this.containment[3]+t.top]):this.containment,e.pageX-this.offset.click.left<i[0]&&(o=i[0]+this.offset.click.left),e.pageY-this.offset.click.top<i[1]&&(a=i[1]+this.offset.click.top),e.pageX-this.offset.click.left>i[2]&&(o=i[2]+this.offset.click.left),e.pageY-this.offset.click.top>i[3]&&(a=i[3]+this.offset.click.top)),n.grid&&(t=n.grid[1]?this.originalPageY+Math.round((a-this.originalPageY)/n.grid[1])*n.grid[1]:this.originalPageY,a=!i||t-this.offset.click.top>=i[1]||t-this.offset.click.top>i[3]?t:t-this.offset.click.top>=i[1]?t-n.grid[1]:t+n.grid[1],e=n.grid[0]?this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0]:this.originalPageX,o=!i||e-this.offset.click.left>=i[0]||e-this.offset.click.left>i[2]?e:e-this.offset.click.left>=i[0]?e-n.grid[0]:e+n.grid[0]),"y"===n.axis&&(o=this.originalPageX),"x"===n.axis&&(a=this.originalPageY)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,t,i){return i=i||this._uiHash(),w.ui.plugin.call(this,e,[t,i,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),i.offset=this.positionAbs),w.Widget.prototype._trigger.call(this,e,t,i)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),w.ui.plugin.add("draggable","connectToSortable",{start:function(t,e,i){var n=w.extend({},e,{item:i.element});i.sortables=[],w(i.options.connectToSortable).each(function(){var e=w(this).sortable("instance");e&&!e.options.disabled&&(i.sortables.push(e),e.refreshPositions(),e._trigger("activate",t,n))})},stop:function(t,e,i){var n=w.extend({},e,{item:i.element});i.cancelHelperRemoval=!1,w.each(i.sortables,function(){var e=this;e.isOver?(e.isOver=0,i.cancelHelperRemoval=!0,e.cancelHelperRemoval=!1,e._storedCSS={position:e.placeholder.css("position"),top:e.placeholder.css("top"),left:e.placeholder.css("left")},e._mouseStop(t),e.options.helper=e.options._helper):(e.cancelHelperRemoval=!0,e._trigger("deactivate",t,n))})},drag:function(i,n,s){w.each(s.sortables,function(){var e=!1,t=this;t.positionAbs=s.positionAbs,t.helperProportions=s.helperProportions,t.offset.click=s.offset.click,t._intersectsWith(t.containerCache)&&(e=!0,w.each(s.sortables,function(){return this.positionAbs=s.positionAbs,this.helperProportions=s.helperProportions,this.offset.click=s.offset.click,e=this!==t&&this._intersectsWith(this.containerCache)&&w.contains(t.element[0],this.element[0])?!1:e})),e?(t.isOver||(t.isOver=1,s._parent=n.helper.parent(),t.currentItem=n.helper.appendTo(t.element).data("ui-sortable-item",!0),t.options._helper=t.options.helper,t.options.helper=function(){return n.helper[0]},i.target=t.currentItem[0],t._mouseCapture(i,!0),t._mouseStart(i,!0,!0),t.offset.click.top=s.offset.click.top,t.offset.click.left=s.offset.click.left,t.offset.parent.left-=s.offset.parent.left-t.offset.parent.left,t.offset.parent.top-=s.offset.parent.top-t.offset.parent.top,s._trigger("toSortable",i),s.dropped=t.element,w.each(s.sortables,function(){this.refreshPositions()}),s.currentItem=s.element,t.fromOutside=s),t.currentItem&&(t._mouseDrag(i),n.position=t.position)):t.isOver&&(t.isOver=0,t.cancelHelperRemoval=!0,t.options._revert=t.options.revert,t.options.revert=!1,t._trigger("out",i,t._uiHash(t)),t._mouseStop(i,!0),t.options.revert=t.options._revert,t.options.helper=t.options._helper,t.placeholder&&t.placeholder.remove(),n.helper.appendTo(s._parent),s._refreshOffsets(i),n.position=s._generatePosition(i,!0),s._trigger("fromSortable",i),s.dropped=!1,w.each(s.sortables,function(){this.refreshPositions()}))})}}),w.ui.plugin.add("draggable","cursor",{start:function(e,t,i){var n=w("body"),i=i.options;n.css("cursor")&&(i._cursor=n.css("cursor")),n.css("cursor",i.cursor)},stop:function(e,t,i){i=i.options;i._cursor&&w("body").css("cursor",i._cursor)}}),w.ui.plugin.add("draggable","opacity",{start:function(e,t,i){t=w(t.helper),i=i.options;t.css("opacity")&&(i._opacity=t.css("opacity")),t.css("opacity",i.opacity)},stop:function(e,t,i){i=i.options;i._opacity&&w(t.helper).css("opacity",i._opacity)}}),w.ui.plugin.add("draggable","scroll",{start:function(e,t,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,t,i){var n=i.options,s=!1,o=i.scrollParentNotHidden[0],a=i.document[0];o!==a&&"HTML"!==o.tagName?(n.axis&&"x"===n.axis||(i.overflowOffset.top+o.offsetHeight-e.pageY<n.scrollSensitivity?o.scrollTop=s=o.scrollTop+n.scrollSpeed:e.pageY-i.overflowOffset.top<n.scrollSensitivity&&(o.scrollTop=s=o.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(i.overflowOffset.left+o.offsetWidth-e.pageX<n.scrollSensitivity?o.scrollLeft=s=o.scrollLeft+n.scrollSpeed:e.pageX-i.overflowOffset.left<n.scrollSensitivity&&(o.scrollLeft=s=o.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-w(a).scrollTop()<n.scrollSensitivity?s=w(a).scrollTop(w(a).scrollTop()-n.scrollSpeed):w(window).height()-(e.pageY-w(a).scrollTop())<n.scrollSensitivity&&(s=w(a).scrollTop(w(a).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-w(a).scrollLeft()<n.scrollSensitivity?s=w(a).scrollLeft(w(a).scrollLeft()-n.scrollSpeed):w(window).width()-(e.pageX-w(a).scrollLeft())<n.scrollSensitivity&&(s=w(a).scrollLeft(w(a).scrollLeft()+n.scrollSpeed)))),!1!==s&&w.ui.ddmanager&&!n.dropBehaviour&&w.ui.ddmanager.prepareOffsets(i,e)}}),w.ui.plugin.add("draggable","snap",{start:function(e,t,i){var n=i.options;i.snapElements=[],w(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var e=w(this),t=e.offset();this!==i.element[0]&&i.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:t.top,left:t.left})})},drag:function(e,t,i){for(var n,s,o,a,r,l,c,p,d,h=i.options,u=h.snapTolerance,A=t.offset.left,f=A+i.helperProportions.width,g=t.offset.top,m=g+i.helperProportions.height,b=i.snapElements.length-1;0<=b;b--)l=(r=i.snapElements[b].left-i.margins.left)+i.snapElements[b].width,p=(c=i.snapElements[b].top-i.margins.top)+i.snapElements[b].height,f<r-u||l+u<A||m<c-u||p+u<g||!w.contains(i.snapElements[b].item.ownerDocument,i.snapElements[b].item)?(i.snapElements[b].snapping&&i.options.snap.release&&i.options.snap.release.call(i.element,e,w.extend(i._uiHash(),{snapItem:i.snapElements[b].item})),i.snapElements[b].snapping=!1):("inner"!==h.snapMode&&(n=Math.abs(c-m)<=u,s=Math.abs(p-g)<=u,o=Math.abs(r-f)<=u,a=Math.abs(l-A)<=u,n&&(t.position.top=i._convertPositionTo("relative",{top:c-i.helperProportions.height,left:0}).top),s&&(t.position.top=i._convertPositionTo("relative",{top:p,left:0}).top),o&&(t.position.left=i._convertPositionTo("relative",{top:0,left:r-i.helperProportions.width}).left),a&&(t.position.left=i._convertPositionTo("relative",{top:0,left:l}).left)),d=n||s||o||a,"outer"!==h.snapMode&&(n=Math.abs(c-g)<=u,s=Math.abs(p-m)<=u,o=Math.abs(r-A)<=u,a=Math.abs(l-f)<=u,n&&(t.position.top=i._convertPositionTo("relative",{top:c,left:0}).top),s&&(t.position.top=i._convertPositionTo("relative",{top:p-i.helperProportions.height,left:0}).top),o&&(t.position.left=i._convertPositionTo("relative",{top:0,left:r}).left),a&&(t.position.left=i._convertPositionTo("relative",{top:0,left:l-i.helperProportions.width}).left)),!i.snapElements[b].snapping&&(n||s||o||a||d)&&i.options.snap.snap&&i.options.snap.snap.call(i.element,e,w.extend(i._uiHash(),{snapItem:i.snapElements[b].item})),i.snapElements[b].snapping=n||s||o||a||d)}}),w.ui.plugin.add("draggable","stack",{start:function(e,t,i){var n,i=i.options,i=w.makeArray(w(i.stack)).sort(function(e,t){return(parseInt(w(e).css("zIndex"),10)||0)-(parseInt(w(t).css("zIndex"),10)||0)});i.length&&(n=parseInt(w(i[0]).css("zIndex"),10)||0,w(i).each(function(e){w(this).css("zIndex",n+e)}),this.css("zIndex",n+i.length))}}),w.ui.plugin.add("draggable","zIndex",{start:function(e,t,i){t=w(t.helper),i=i.options;t.css("zIndex")&&(i._zIndex=t.css("zIndex")),t.css("zIndex",i.zIndex)},stop:function(e,t,i){i=i.options;i._zIndex&&w(t.helper).css("zIndex",i._zIndex)}}),w.ui.draggable},"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery);t(function(e){var t,c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t=function(A){var f=A.keyboard=function(l,s){var h,u=this;u.version="1.29.1",u.$el=A(l),u.el=l,u.$el.data("keyboard",u),u.init=function(){u.initialized=!1;var e,t=f.css,i=f.events,n=(u.settings=s||{},s&&s.position&&(e=A.extend({},s.position),s.position=null),u.options=h=A.extend(!0,{},f.defaultOptions,s),e&&(h.position=e,s.position=e),u.el.active=!0,u.namespace=".keyboard"+Math.random().toString(16).slice(2),u.extensionNamespace=[],u.shiftActive=u.altActive=u.metaActive=u.sets=u.capsLock=!1,u.rows=["","-shift","-alt","-alt-shift"],u.inPlaceholder=u.$el.attr("placeholder")||"",u.watermark=f.watermark&&""!==u.inPlaceholder,u.repeatTime=1e3/(h.repeatRate||20),h.preventDoubleEventTime=h.preventDoubleEventTime||100,u.isOpen=!1,u.wheel="function"==typeof A.fn.mousewheel,u.escapeRegex=/[-\/\\^$*+?.()|[\]{}]/g,u.isTextArea="textarea"===u.el.nodeName.toLowerCase(),u.isInput="input"===u.el.nodeName.toLowerCase(),u.isContentEditable=!u.isTextArea&&!u.isInput&&u.el.isContentEditable,e=f.keyCodes,u.alwaysAllowed=[e.capsLock,e.pageUp,e.pageDown,e.end,e.home,e.left,e.up,e.right,e.down,e.insert,e.delete],u.$keyboard=[],u.enabled=!0,u.checkCaret=h.lockInput||f.checkCaretSupport(),u.isContentEditable&&(h.usePreview=!1),u.last={start:0,end:0,key:"",val:"",preVal:"",layout:"",virtual:!0,keyset:[!1,!1,!1],wheel_$Keys:[],wheelIndex:0,wheelLayers:[]},u.temp=["",0,0],A.each([i.kbInit,i.kbBeforeVisible,i.kbVisible,i.kbHidden,i.inputCanceled,i.inputAccepted,i.kbBeforeClose,i.inputRestricted],function(e,t){"function"==typeof h[t]&&u.$el.bind(t+u.namespace+"callbacks",h[t])}),h.alwaysOpen&&(h.stayOpen=!0),e=A(document),u.el.ownerDocument!==document&&(e=e.add(u.el.ownerDocument)),"keyup checkkeyboard mousedown touchstart ");h.closeByClickEvent&&(n+="click "),e.bind(n.split(" ").join(u.namespace+" "),function(e){clearTimeout(u.timer3),u.timer3=setTimeout(function(){u.checkClose(e)},1)}),u.$el.addClass(t.input+" "+h.css.input).attr({"aria-haspopup":"true",role:"textbox"}),(h.lockInput||u.el.readOnly)&&(h.lockInput=!0,u.$el.addClass(t.locked).attr({readonly:"readonly"})),u.isUnavailable()&&u.$el.addClass(t.noKeyboard),h.openOn&&u.bindFocus(),u.watermark||""!==u.getValue(u.$el)||""===u.inPlaceholder||""===u.$el.attr("placeholder")||(u.$el.addClass(t.placeholder),u.setValue(u.inPlaceholder,u.$el)),u.$el.trigger(i.kbInit,[u,u.el]),h.alwaysOpen&&u.reveal(),u.initialized=!0},u.toggle=function(){var e,t;if(u.hasKeyboard())return e=u.$keyboard.find("."+f.css.keyToggle),t=!u.enabled,u.preview.readonly=t||u.options.lockInput,u.$keyboard.toggleClass(f.css.keyDisabled,t).find("."+f.css.keyButton).not(e).attr("aria-disabled",t).each(function(){this.disabled=t}),e.toggleClass(f.css.keyDisabled,t),t&&u.typing_options&&(u.typing_options.text=""),u},u.setCurrent=function(){var e=f.css,t=A("."+e.isCurrent),i=t.data("keyboard");A.isEmptyObject(i)||i.el===u.el||i.close(!!i.options.autoAccept&&"true"),t.removeClass(e.isCurrent),A("."+e.hasFocus).removeClass(e.hasFocus),u.$el.addClass(e.isCurrent),u.$keyboard.addClass(e.hasFocus),u.isCurrent(!0),u.isOpen=!0},u.isUnavailable=function(){return u.$el.is(":disabled")||!u.options.activeOnReadonly&&u.$el.attr("readonly")&&!u.$el.hasClass(f.css.locked)},u.isCurrent=function(e){var t=f.currentKeyboard||!1;return e?t=f.currentKeyboard=u.el:!1===e&&t===u.el&&(t=f.currentKeyboard=""),t===u.el},u.hasKeyboard=function(){return u.$keyboard&&0<u.$keyboard.length},u.isVisible=function(){return!!u.hasKeyboard()&&u.$keyboard.is(":visible")},u.setFocus=function(){var e=u.$preview||u.$el;h.noFocus||e.focus(),u.isContentEditable?f.setEditableCaret(e,u.last.start,u.last.end):f.caret(e,u.last)},u.focusOn=function(){!u&&u.el.active||(u.isVisible()?u.setCurrent():(clearTimeout(u.timer),u.reveal()))},u.redraw=function(e){return e&&(u.options.layout=e),u.$keyboard.length&&(u.last.preVal=""+u.last.val,u.saveLastChange(),u.setValue(u.last.val,u.$el),u.removeKeyboard(),u.shiftActive=u.altActive=u.metaActive=!1),u.isOpen=h.alwaysOpen,u.reveal(!0),u},u.reveal=function(e){var t=u.isOpen,i=f.css;if(u.opening=!t,A("."+i.keyboard).not("."+i.alwaysOpen).each(function(){var e=A(this).data("keyboard");A.isEmptyObject(e)||e.close(!!e.options.autoAccept&&"true")}),!u.isUnavailable())return u.$el.removeClass(i.noKeyboard),h.openOn&&u.$el.unbind(A.trim((h.openOn+" ").split(/\s+/).join(u.namespace+" "))),u.$keyboard&&(!u.$keyboard||u.$keyboard.length&&!A.contains(u.el.ownerDocument.body,u.$keyboard[0]))||u.startup(),u.watermark||u.getValue()!==u.inPlaceholder||(u.$el.removeClass(i.placeholder),u.setValue("",u.$el)),u.originalContent=u.isContentEditable?u.$el.html():u.getValue(u.$el),u.el===u.preview||u.isContentEditable||u.setValue(u.originalContent),h.acceptValid&&h.checkValidOnInit&&u.checkValid(),h.resetDefault&&(u.shiftActive=u.altActive=u.metaActive=!1),u.showSet(),u.isVisible()||u.$el.trigger(f.events.kbBeforeVisible,[u,u.el]),(u.initialized||h.initialFocus||!h.initialFocus&&u.$el.hasClass(f.css.initialFocus))&&u.setCurrent(),u.toggle(),u.$keyboard.show(),h.usePreview&&f.msie&&(void 0===u.width&&(u.$preview.hide(),u.width=Math.ceil(u.$keyboard.width()),u.$preview.show()),u.$preview.width(u.width)),u.reposition(),u.checkDecimal(),u.lineHeight=parseInt(u.$preview.css("lineHeight"),10)||parseInt(u.$preview.css("font-size"),10)+4,h.caretToEnd&&(i=u.isContentEditable?f.getEditableLength(u.el):u.originalContent.length,u.saveCaret(i,i)),f.allie&&(0===u.last.end&&0<u.last.start&&(u.last.end=u.last.start),u.last.start<0&&(u.last.start=u.last.end=u.originalContent.length)),t||e?(f.caret(u.$preview,u.last),u.opening=!1):u.timer2=setTimeout(function(){u.opening=!1,/(number|email)/i.test(u.el.type)||h.caretToEnd||u.saveCaret(void 0,void 0,u.$el),(h.initialFocus||u.$el.hasClass(f.css.initialFocus))&&f.caret(u.$preview,u.last),u.last.eventTime=(new Date).getTime(),u.$el.trigger(f.events.kbVisible,[u,u.el]),u.timer=setTimeout(function(){u&&u.saveCaret()},200)},10),u},u.updateLanguage=function(){var e=f.layouts,t=h.language||e[h.layout]&&e[h.layout].lang&&e[h.layout].lang||[h.language||"en"],i=f.language,t="[object Array]"===Object.prototype.toString.call(t)?t[0]:t;t=(u.language=t).split("-")[0],h.display=A.extend(!0,{},i.en.display,i[t]&&i[t].display||{},u.settings.display),h.combos=A.extend(!0,{},i.en.combos,i[t]&&i[t].combos||{},u.settings.combos),h.wheelMessage=i[t]&&i[t].wheelMessage||i.en.wheelMessage,h.rtl=e[h.layout]&&e[h.layout].rtl||i[t]&&i[t].rtl||!1,i[t]&&i[t].comboRegex&&(u.regex=i[t].comboRegex),u.decimal=/^\./.test(h.display.dec),u.$el.toggleClass("rtl",h.rtl).css("direction",h.rtl?"rtl":"")},u.startup=function(){var e=f.css;(h.alwaysOpen||h.userClosed)&&u.$preview||u.makePreview(),u.hasKeyboard()||("custom"===h.layout&&(h.layoutHash="custom"+u.customHash()),u.layout="custom"===h.layout?h.layoutHash:h.layout,u.last.layout=u.layout,u.updateLanguage(),void 0===f.builtLayouts[u.layout]&&("function"==typeof h.create?u.$keyboard=h.create(u):u.$keyboard.length||u.buildKeyboard(u.layout,!0)),u.$keyboard=f.builtLayouts[u.layout].$keyboard.clone(),u.$keyboard.data("keyboard",u),""!==(u.el.id||"")&&u.$keyboard.attr("id",u.el.id+f.css.idSuffix),u.makePreview()),u.$keyboard.attr("data-"+e.keyboard+"-layout",h.layout).attr("data-"+e.keyboard+"-language",u.language),u.$decBtn=u.$keyboard.find("."+e.keyPrefix+"dec"),(h.enterNavigation||u.isTextArea)&&u.alwaysAllowed.push(f.keyCodes.enter),u.bindKeyboard(),u.$keyboard.appendTo(h.appendLocally?u.$el.parent():h.appendTo||"body"),u.bindKeys(),h.reposition&&A.ui&&A.ui.position&&"body"===h.appendTo&&A(window).bind("resize"+u.namespace,function(){u.reposition()})},u.reposition=function(){return u.position=!A.isEmptyObject(h.position)&&h.position,A.ui&&A.ui.position&&u.position&&(u.position.of=u.position.of||u.$el.data("keyboardPosition")||u.$el,u.position.collision=u.position.collision||"flipfit flipfit",u.position.at=h.usePreview?h.position.at:h.position.at2,u.isVisible()&&u.$keyboard.position(u.position)),u},u.makePreview=function(){if(h.usePreview){var e,t,i,n,s=f.css;for(u.$preview=u.$el.clone(!1).data("keyboard",u).removeClass(s.placeholder+" "+s.input).addClass(s.preview+" "+h.css.input).attr("tabindex","-1").show(),u.preview=u.$preview[0],"number"===u.preview.type&&(u.preview.type="text"),n=/^(data-|id|aria-haspopup)/i,e=(t=u.$preview.get(0).attributes).length-1;0<=e;e--)i=t[e]&&t[e].name,n.test(i)&&u.preview.removeAttribute(i);A("<div />").addClass(s.wrapper).append(u.$preview).prependTo(u.$keyboard)}else u.$preview=u.$el,u.preview=u.el},u.caret=function(e,t){e=f.caret(u.$preview,e,t);return e instanceof A?(u.saveCaret(e.start,e.end),u):e},u.saveCaret=function(e,t,i){u.isCurrent()&&(i=void 0===e?f.caret(i||u.$preview):f.caret(i||u.$preview,e,t),u.last.start=void 0===e?i.start:e,u.last.end=void 0===t?i.end:t)},u.saveLastChange=function(e){u.last.val=e||u.getValue(u.$preview||u.$el),u.isContentEditable&&(u.last.elms=u.el.cloneNode(!0))},u.setScroll=function(){var e,t,i,n;!u.isContentEditable&&u.last.virtual&&(n=u.last.val.substring(0,Math.max(u.last.start,u.last.end)),u.$previewCopy||(u.$previewCopy=u.$preview.clone().removeAttr("id").css({position:"absolute",left:0,zIndex:-10,visibility:"hidden"}).addClass(f.css.inputClone),u.$previewCopy[0].disabled=!0,u.isTextArea||u.$previewCopy.css({"white-space":"pre",width:0}),h.usePreview?u.$preview.after(u.$previewCopy):u.$keyboard.prepend(u.$previewCopy)),u.isTextArea?(u.$previewCopy.height(u.lineHeight).val(n),u.preview.scrollTop=u.lineHeight*(Math.floor(u.$previewCopy[0].scrollHeight/u.lineHeight)-1)):(u.$previewCopy.val(n.replace(/\s/g," ")),n=/c/i.test(h.scrollAdjustment)?u.preview.clientWidth/2:h.scrollAdjustment,e=u.$previewCopy[0].scrollWidth-1,void 0===u.last.scrollWidth&&(u.last.scrollWidth=e,u.last.direction=!0),i=u.last.scrollWidth===e?u.last.direction:u.last.scrollWidth<e,t=u.preview.clientWidth-n,i?u.preview.scrollLeft=e<t?0:e-t:e>=u.preview.scrollWidth-t?u.preview.scrollLeft=u.preview.scrollWidth-n:u.preview.scrollLeft=0<e-n?e-n:0,u.last.scrollWidth=e,u.last.direction=i))},u.bindFocus=function(){h.openOn&&u&&u.el.active&&(u.$el.bind(h.openOn+u.namespace,function(){u.focusOn()}),A(":focus")[0]===u.el&&u.$el.blur())},u.bindKeyboard=function(){var o,a=f.keyCodes,r=f.builtLayouts[u.layout],e=u.namespace+"keybindings";u.$preview.unbind(u.namespace).bind("click"+e+" touchstart"+e,function(){h.alwaysOpen&&!u.isCurrent()&&u.reveal(),u.timer2=setTimeout(function(){u&&u.saveCaret()},150)}).bind("keypress"+e,function(e){if(h.lockInput)return!1;if(u.isCurrent()){var t=e.charCode||e.which,i=t>=a.A&&t<=a.Z,n=t>=a.a&&t<=a.z,s=u.last.key=String.fromCharCode(t);if(!(t<a.space)){if(u.last.virtual=!1,u.last.event=e,u.last.$key=[],u.checkCaret&&u.saveCaret(),t!==a.capsLock&&(i||n)&&(u.capsLock=i&&!e.shiftKey||n&&e.shiftKey,u.capsLock&&!u.shiftActive&&(u.shiftActive=!0,u.showSet())),h.restrictInput){if((e.which===a.backSpace||0===e.which)&&A.inArray(e.keyCode,u.alwaysAllowed))return;-1===A.inArray(s,r.acceptedKeys)&&(e.preventDefault(),(o=A.extend({},e)).type=f.events.inputRestricted,u.$el.trigger(o,[u,u.el]))}else if((e.ctrlKey||e.metaKey)&&(e.which===a.A||e.which===a.C||e.which===a.V||e.which>=a.X&&e.which<=a.Z))return;r.hasMappedKeys&&r.mappedKeys.hasOwnProperty(s)&&(u.last.key=r.mappedKeys[s],u.insertText(u.last.key),e.preventDefault()),"function"==typeof h.beforeInsert&&(u.insertText(u.last.key),e.preventDefault()),u.checkMaxLength()}}}).bind("keyup"+e,function(e){if(u.isCurrent()){switch(u.last.virtual=!1,e.which){case a.tab:if(u.tab&&!h.lockInput){u.shiftActive=e.shiftKey;var t=f.keyaction.tab(u);if(u.tab=!1,!t)return!1}else e.preventDefault();break;case a.escape:return h.ignoreEsc||u.close(!(!h.autoAccept||!h.autoAcceptOnEsc)&&"true"),!1}clearTimeout(u.throttled),u.throttled=setTimeout(function(){u&&u.isVisible()&&u.checkCombos()},100),u.checkMaxLength(),u.last.preVal=""+u.last.val,u.saveLastChange();var i=A.Event(f.events.kbChange);if(i.action=u.last.key,u.$el.trigger(i,[u,u.el]),"function"==typeof h.change)return i.type=f.events.inputChange,h.change(i,u,u.el),!1;h.acceptValid&&h.autoAcceptOnValid&&"function"==typeof h.validate&&h.validate(u,u.getValue(u.$preview))&&(u.$preview.blur(),u.accept())}}).bind("keydown"+e,function(e){if(u.last.keyPress=e.which,h.alwaysOpen&&!u.isCurrent()&&u.reveal(),e.which===a.tab)return!(u.tab=!0);if(h.lockInput||e.timeStamp===u.last.timeStamp)return!h.lockInput;switch(u.last.timeStamp=e.timeStamp,u.last.virtual=!1,e.which){case a.backSpace:f.keyaction.bksp(u,null,e),e.preventDefault();break;case a.enter:f.keyaction.enter(u,null,e);break;case a.capsLock:u.shiftActive=u.capsLock=!u.capsLock,u.showSet();break;case a.V:if(e.ctrlKey||e.metaKey){if(h.preventPaste)return void e.preventDefault();u.checkCombos()}}}).bind("mouseup touchend ".split(" ").join(e+" "),function(){u.last.virtual=!0,u.saveCaret()}),u.$keyboard.bind("mousedown click touchstart ".split(" ").join(u.namespace+" "),function(e){e.stopPropagation(),u.isCurrent()||(u.reveal(),A(u.el.ownerDocument).trigger("checkkeyboard"+u.namespace)),u.setFocus()}),h.preventPaste&&(u.$preview.bind("contextmenu"+u.namespace,function(e){e.preventDefault()}),u.$el.bind("contextmenu"+u.namespace,function(e){e.preventDefault()}))},u.bindButton=function(e,t){function i(e){e.stopPropagation(),e.$target=A(this).closest("."+f.css.keyboard+", ."+f.css.input),t.call(this,e)}var n="."+f.css.keyButton;return A.fn.on?u.$keyboard.on(e,n,i):A.fn.delegate&&u.$keyboard.delegate(n,e,i),u},u.unbindButton=function(e){return A.fn.off?u.$keyboard.off(e):A.fn.undelegate&&u.$keyboard.undelegate("."+f.css.keyButton,e),u},u.bindKeys=function(){var o=f.css;u.unbindButton(u.namespace+" "+u.namespace+"kb").bindButton("mouseenter mouseleave touchstart ".split(" ").join(u.namespace+" "),function(e){var i,t,n,s;!h.alwaysOpen&&!h.userClosed||"mouseleave"===e.type||u.isCurrent()||(u.reveal(),u.setFocus()),u.isCurrent()&&!this.disabled&&(t=u.last,n=A(this),s=e.type,h.useWheel&&u.wheel&&(e=u.getLayers(n),i=(e.length?e.map(function(){return A(this).attr("data-value")||""}).get():"")||[n.text()],t.wheel_$Keys=e,t.wheelLayers=i,t.wheelIndex=A.inArray(n.attr("data-value"),i)),"mouseenter"!==s&&"touchstart"!==s||"password"===u.el.type||n.hasClass(h.css.buttonDisabled)||(n.addClass(h.css.buttonHover),h.useWheel&&u.wheel&&n.attr("title",function(e,t){return u.wheel&&""===t&&u.sets&&1<i.length&&"touchstart"!==s?h.wheelMessage:t})),"mouseleave"===s&&(n.removeClass("password"===u.el.type?"":h.css.buttonHover),h.useWheel&&u.wheel&&(t.wheelIndex=0,t.wheelLayers=[],t.wheel_$Keys=[],n.attr("title",function(e,t){return t===h.wheelMessage?"":t}).html(n.attr("data-html")))))}).bindButton(h.keyBinding.split(" ").join(u.namespace+" ")+u.namespace+" "+f.events.kbRepeater,function(e){if(e.preventDefault(),!u.$keyboard.is(":visible")||this.disabled)return!1;var t=u.last,i=A(this),n=(new Date).getTime(),s=(i=h.useWheel&&u.wheel?t.wheel_$Keys.length&&-1<t.wheelIndex?t.wheel_$Keys.eq(t.wheelIndex):i:i).attr("data-action");if(!(n-(t.eventTime||0)<h.preventDoubleEventTime)){if(t.eventTime=n,t.event=e,t.virtual=!0,t.$key=i,t.key=i.attr("data-value"),t.keyPress="",u.setFocus(),(s=/^meta/.test(s)?"meta":s)===t.key&&"string"==typeof f.keyaction[s])t.key=s=f.keyaction[s];else if(s in f.keyaction&&"function"==typeof f.keyaction[s]){if(!1===f.keyaction[s](u,this,e))return!1;s=null}return u.hasKeyboard()?(null!=s&&(t.key=A(this).hasClass(o.keyAction)?s:t.key,u.insertText(t.key),u.capsLock||h.stickyShift||e.shiftKey||(u.shiftActive=!1,u.showSet(i.attr("data-name")))),f.caret(u.$preview,t),u.checkCombos(),(e=A.extend({},e,A.Event(f.events.kbChange))).target=u.el,e.action=t.key,u.$el.trigger(e,[u,u.el]),t.preVal=""+t.val,u.saveLastChange(),"function"==typeof h.change?(e.type=f.events.inputChange,h.change(e,u,u.el),!1):void 0):!1}}).bindButton("mouseup"+u.namespace+" "+"mouseleave touchend touchmove touchcancel ".split(" ").join(u.namespace+"kb "),function(e){u.last.virtual=!0;var t,i=A(this);if("touchmove"===e.type){if((t=i.offset()).right=t.left+i.outerWidth(),t.bottom=t.top+i.outerHeight(),e.originalEvent.touches[0].pageX>=t.left&&e.originalEvent.touches[0].pageX<t.right&&e.originalEvent.touches[0].pageY>=t.top&&e.originalEvent.touches[0].pageY<t.bottom)return!0}else/(mouseleave|touchend|touchcancel)/i.test(e.type)?i.removeClass(h.css.buttonHover):(!h.noFocus&&u.isCurrent()&&u.isVisible()&&u.$preview.focus(),u.checkCaret&&f.caret(u.$preview,u.last));return u.mouseRepeat=[!1,""],clearTimeout(u.repeater),h.acceptValid&&h.autoAcceptOnValid&&"function"==typeof h.validate&&h.validate(u,u.getValue())&&(u.$preview.blur(),u.accept()),!1}).bindButton("click"+u.namespace,function(){return!1}).bindButton("mousewheel"+u.namespace,u.throttleEvent(function(e,t){var i,n=A(this);return n&&!n.hasClass(o.keyAction)&&u.last.wheel_$Keys[0]===this&&h.useWheel&&u.wheel?(t=t||e.deltaY,1<(e=u.last.wheelLayers||[]).length?(i=(i=u.last.wheelIndex+(0<t?-1:1))>e.length-1?0:i)<0&&(i=e.length-1):i=0,u.last.wheelIndex=i,n.html(e[i]),!1):void 0},30)).bindButton("mousedown touchstart ".split(" ").join(u.namespace+"kb "),function(){var e=A(this);if(e&&(!e.hasClass(o.keyAction)||e.is("."+o.keyPrefix+"tab bksp space enter".split(" ").join(",."+o.keyPrefix))))return 0!==h.repeatRate&&(u.mouseRepeat=[!0,e],setTimeout(function(){u&&u.mouseRepeat[0]&&u.mouseRepeat[1]===e&&!e[0].disabled&&u.repeatKey(e)},h.repeatDelay)),!1})},u.throttleEvent=function(e,t){var i;return function(){i||(e.apply(this,arguments),i=!0,setTimeout(function(){i=!1},t))}},u.execCommand=function(e,t){u.el.ownerDocument.execCommand(e,!1,t),u.el.normalize(),h.reposition&&u.reposition()},u.getValue=function(e){return(e=e||u.$preview)[u.isContentEditable?"text":"val"]()},u.setValue=function(e,t){return t=t||u.$preview,u.isContentEditable?e!==t.text()&&(f.replaceContent(t,e),u.saveCaret()):t.val(e),u},u.insertText=function(e){if(u.$preview)if(void 0===(e="function"==typeof h.beforeInsert?h.beforeInsert(u.last.event,u,u.el,e):e)||!1===e)u.last.key="";else{if(u.isContentEditable)return u.insertContentEditable(e);var t=!1,i="\b"===e,n=u.getValue(),s=f.caret(u.$preview),o=n.length;s.end<s.start&&(s.end=s.start),s.start>o&&(s.end=s.start=o),u.isTextArea&&f.msie&&"\n"===n.substring(s.start,s.start+1)&&(s.start+=1,s.end+=1),o=s.start,"{d}"===e&&(e="",s.end+=1),i&&(e="",t=i&&o===s.end&&0<o),n=n.substring(0,o-(t?1:0))+e+n.substring(s.end),o+=t?-1:e.length,u.setValue(n),u.saveCaret(o,o),u.setScroll()}return u},u.insertContentEditable=function(e){return u.$preview.focus(),u.execCommand("insertText",e),u.saveCaret(),u},u.checkMaxLength=function(){var e,t,i;if(u.$preview)return t=u.getValue(),i=u.isContentEditable?f.getEditableLength(u.el):t.length,!1!==h.maxLength&&i>h.maxLength&&(i=f.caret(u.$preview).start,e=Math.min(i,h.maxLength),h.maxInsert||(t=u.last.val,e=i-1),u.setValue(t.substring(0,h.maxLength)),u.saveCaret(e,e)),u.$decBtn.length&&u.checkDecimal(),u},u.repeatKey=function(e){e.trigger(f.events.kbRepeater),u.mouseRepeat[0]&&(u.repeater=setTimeout(function(){u&&u.repeatKey(e)},u.repeatTime))},u.getKeySet=function(){var e=[];return u.altActive&&e.push("alt"),u.shiftActive&&e.push("shift"),u.metaActive&&e.push(u.metaActive),e.length?e.join("+"):"normal"},u.showKeySet=function(e){return"string"==typeof e?(u.last.keyset=[u.shiftActive,u.altActive,u.metaActive],u.shiftActive=/shift/i.test(e),u.altActive=/alt/i.test(e),/\bmeta/.test(e)?(u.metaActive=!0,u.showSet(e.match(/\bmeta[\w-]+/i)[0])):(u.metaActive=!1,u.showSet())):u.showSet(e),u},u.showSet=function(e){var t,i,n,s,o;u.hasKeyboard()&&(h=u.options,i="."+(t=f.css).keyPrefix,n=h.css.buttonActive,s="",o=(u.shiftActive?1:0)+(u.altActive?2:0),u.shiftActive||(u.capsLock=!1),u.metaActive?(u.shiftActive&&(e=(e||"").replace("-shift","")),u.altActive&&(e=(e||"").replace("-alt","")),""===(s=/^meta/i.test(e)?e:"")?s=!0===u.metaActive?"":u.metaActive:u.metaActive=s,(!h.stickyShift&&u.last.keyset[2]!==u.metaActive||(u.shiftActive||u.altActive)&&!u.$keyboard.find("."+t.keySet+"-"+s+u.rows[o]).length)&&(u.shiftActive=u.altActive=!1)):!h.stickyShift&&u.last.keyset[2]!==u.metaActive&&u.shiftActive&&(u.shiftActive=u.altActive=!1),s=0!==(o=(u.shiftActive?1:0)+(u.altActive?2:0))||u.metaActive?""===s?"":"-"+s:"-normal",u.$keyboard.find("."+t.keySet+s+u.rows[o]).length?(u.$keyboard.find(i+"alt,"+i+"shift,."+t.keyAction+"[class*=meta]").removeClass(n).end().find(i+"alt").toggleClass(n,u.altActive).end().find(i+"shift").toggleClass(n,u.shiftActive).end().find(i+"lock").toggleClass(n,u.capsLock).end().find("."+t.keySet).hide().end().find("."+(t.keyAction+i+s).replace("--","-")).addClass(n),u.$keyboard.find("."+t.keySet+s+u.rows[o])[0].style.display="inline-block",u.metaActive&&u.$keyboard.find(i+u.metaActive).toggleClass(n,!1!==u.metaActive),u.last.keyset=[u.shiftActive,u.altActive,u.metaActive],u.$el.trigger(f.events.kbKeysetChange,[u,u.el]),h.reposition&&u.reposition()):(u.shiftActive=u.last.keyset[0],u.altActive=u.last.keyset[1],u.metaActive=u.last.keyset[2]))},u.checkCombos=function(){var e,t,i,n,s,o,a,r;return u.isVisible()||u.hasKeyboard()&&u.$keyboard.hasClass(f.css.hasFocus)?(n=u.getValue(),s=f.caret(u.$preview),o=f.builtLayouts[u.layout],r=a=u.isContentEditable?f.getEditableLength(u.el):n.length,""!==n&&(s.end<s.start&&(s.end=s.start),s.start>r&&(s.end=s.start=r),f.msie&&"\n"===n.substring(s.start,s.start+1)&&(s.start+=1,s.end+=1),h.useCombos&&(f.msie?n=n.replace(u.regex,function(e,t,i){return h.combos.hasOwnProperty(t)&&h.combos[t][i]||e}):u.$preview.length&&(e=s.start-(0<=s.start-2?2:0),f.caret(u.$preview,e,s.end),t=(i=function(e){return(e||"").replace(u.regex,function(e,t,i){return h.combos.hasOwnProperty(t)&&h.combos[t][i]||e})})((e=f.caret(u.$preview)).text),e&&e.replaceStr&&t!==e.text&&(u.isContentEditable?f.replaceContent(l,i):u.setValue(e.replaceStr(t))),n=u.getValue())),h.restrictInput&&""!==n&&(e=o.acceptedKeys.length,(i=o.acceptedKeysRegex)||(t=A.map(o.acceptedKeys,function(e){return e.replace(u.escapeRegex,"\\$&")}),-1<u.alwaysAllowed.indexOf(f.keyCodes.enter)&&t.push("\\n"),i=o.acceptedKeysRegex=new RegExp("("+t.join("|")+")","g")),(t=n.match(i))?n=t.join(""):(n="",r=0)),s.start+=a-r,s.end+=a-r,u.setValue(n),u.saveCaret(s.start,s.end),u.setScroll(),u.checkMaxLength()),h.acceptValid&&u.checkValid(),n):u.getValue(u.$preview||u.$el)},u.checkValid=function(){var e=f.css,t=u.$keyboard.find("."+e.keyPrefix+"accept"),i=!0;"function"==typeof h.validate&&(i=h.validate(u,u.getValue(),!1)),t.toggleClass(e.inputInvalid,!i).toggleClass(e.inputValid,i).attr("title",t.attr("data-title")+" ("+h.display[i?"valid":"invalid"]+")")},u.checkDecimal=function(){u.decimal&&/\./g.test(u.preview.value)||!u.decimal&&/\,/g.test(u.preview.value)?u.$decBtn.attr({disabled:"disabled","aria-disabled":"true"}).removeClass(h.css.buttonHover).addClass(h.css.buttonDisabled):u.$decBtn.removeAttr("disabled").attr({"aria-disabled":"false"}).addClass(h.css.buttonDefault).removeClass(h.css.buttonDisabled)},u.getLayers=function(e){var t=f.css,i=e.attr("data-pos");return e.closest("."+t.keyboard).find('button[data-pos="'+i+'"]').filter(function(){return""!==A(this).find("."+t.keyText).text()}).add(e)},u.switchInput=function(e,t){if("function"==typeof h.switchInput)h.switchInput(u,e,t);else{u.$keyboard.length&&u.$keyboard.hide();var i=!1,n=A("button, input, select, textarea, a, [contenteditable]").filter(":visible").not(":disabled"),e=n.index(u.$el)+(e?1:-1);if(u.$keyboard.length&&u.$keyboard.show(),e>n.length-1&&(i=h.stopAtEnd,e=0),e<0&&(i=h.stopAtEnd,e=n.length-1),!i){if(!(t=u.close(t)))return;(i=n.eq(e).data("keyboard"))&&i.options.openOn.length?i.focusOn():n.eq(e).focus()}}return!1},u.close=function(e){if(u.isOpen&&u.$keyboard.length){clearTimeout(u.throttled);var t=f.css,i=f.events,n=e?u.checkCombos():u.originalContent;if(e&&"function"==typeof h.validate&&!h.validate(u,n,!0)&&(n=u.originalContent,e=!1,h.cancelClose))return;u.isCurrent(!1),u.isOpen=h.alwaysOpen||h.userClosed,u.isContentEditable&&!e?u.$el.html(n):u.setValue(n,u.$el),u.$el.removeClass(t.isCurrent+" "+t.inputAutoAccepted).addClass(!e||!0===e?"":t.inputAutoAccepted).trigger(i.inputChange),h.alwaysOpen||u.$el.trigger(i.kbBeforeClose,[u,u.el,e||!1]),f.caret(u.$preview,u.last),u.$el.trigger(e?i.inputAccepted:i.inputCanceled,[u,u.el]).trigger(h.alwaysOpen?i.kbInactive:i.kbHidden,[u,u.el]).blur(),u&&(u.last.eventTime=(new Date).getTime(),h.alwaysOpen||h.userClosed&&"true"===e||!u.$keyboard.length||(u.removeKeyboard(),u.timer=setTimeout(function(){u&&u.bindFocus()},200)),u.watermark||""!==u.el.value||""===u.inPlaceholder||(u.$el.addClass(t.placeholder),u.setValue(u.inPlaceholder,u.$el)))}return!!e},u.accept=function(){return u.close(!0)},u.checkClose=function(e){var t,i,n;u.opening||(t=A.keyboard.css,(i=(i=e.$target||A(e.target).closest("."+f.css.keyboard+", ."+f.css.input)).length?i:A(e.target)).length&&i.hasClass(t.keyboard)?(n=i.data("keyboard"))!==u&&!n.$el.hasClass(t.isCurrent)&&n.options.openOn&&e.type===h.openOn&&n.focusOn():u.escClose(e,i))},u.escCloseCallback={keepOpen:function(){return!u.isOpen}},u.escClose=function(e,t){if(u.isOpen){if(e&&"keyup"===e.type)return e.which!==f.keyCodes.escape||h.ignoreEsc?"":u.close(!(!h.autoAccept||!h.autoAcceptOnEsc)&&"true");var i=!1,n=t.length&&t||A(e.target);A.each(u.escCloseCallback,function(e,t){"function"==typeof t&&(i=i||t(n))}),i||(!u.isCurrent()&&u.isOpen||u.isOpen&&n[0]!==u.el)&&(!h.stayOpen&&!h.userClosed||n.hasClass(f.css.input))&&(f.allie&&e.preventDefault(),h.closeByClickEvent&&"input"!==(t=n[0]&&n[0].nodeName.toLowerCase())&&"textarea"!==t&&"click"!==e.type||u.close(!!h.autoAccept&&"true"))}},u.keyBtn=A("<button />").attr({role:"button",type:"button","aria-disabled":"false",tabindex:"-1"}).addClass(f.css.keyButton),u.processName=function(e){var t,i,n=(e||"").replace(/[^a-z0-9-_]/gi,""),s=n.length,o=[];if(1<s&&e===n||!(s=e.length))return e;for(t=0;t<s;t++)i=e[t],o.push(/[a-z0-9-_]/i.test(i)?/[-_]/.test(i)&&0!==t?"":i:(0===t?"":"-")+i.charCodeAt(0));return o.join("")},u.processKeys=function(e){var t,i=e.split(/:(?!\/\/)/),n=e.indexOf("</"),s=e.indexOf(":",e.indexOf("<")),o={name:null,map:"",title:""};return-1<n&&(s<0||n<s)?o.name=e:(/\(.+\)/.test(i[0])||/^:\(.+\)/.test(e)||/\([(:)]\)/.test(e)?/\([(:)]\)/.test(e)?(t=i[0].match(/([^(]+)\((.+)\)/))&&t.length?(o.name=t[1],o.map=t[2],o.title=1<i.length?i.slice(1).join(":"):""):(o.name=e.match(/([^(]+)/)[0],":"===o.name&&(i=i.slice(1)),null===t&&(o.map=":",i=i.slice(2)),o.title=i.length?i.join(":"):""):(o.map=e.match(/\(([^()]+?)\)/)[1],""===(t=(e=e.replace(/\(([^()]+)\)/,"")).split(":"))[0]?(o.name=":",i=i.slice(1)):o.name=t[0],o.title=1<i.length?i.slice(1).join(":"):""):(""!==e&&""===i[0]?(o.name=":",i=i.slice(1)):o.name=i[0],o.title=1<i.length?i.slice(1).join(":"):""),o.title=A.trim(o.title).replace(/_/g," ")),o},u.addKey=function(e,t,i){var n,s={},t=u.processKeys(i?e:t),o=f.css;return!i&&h.display[t.name]?(n=u.processKeys(h.display[t.name])).action=u.processKeys(e).name:(n=t).action=t.name,s.name=u.processName(t.name),""!==n.name&&(""!==n.map?(f.builtLayouts[u.layout].mappedKeys[n.map]=n.name,f.builtLayouts[u.layout].acceptedKeys.push(n.name)):i&&f.builtLayouts[u.layout].acceptedKeys.push(n.name)),e=i?""===s.name?"":o.keyPrefix+s.name:o.keyAction+" "+o.keyPrefix+n.action,e+=(2<n.name.length?" "+o.keyWide:"")+" "+h.css.buttonDefault,s.html='<span class="'+o.keyText+'">'+n.name.replace(/[\u00A0-\u9999]/gim,function(e){return"&#"+e.charCodeAt(0)+";"})+"</span>",s.$key=u.keyBtn.clone().attr({"data-value":i?n.name:n.action,"data-name":n.action,"data-pos":u.temp[1]+","+u.temp[2],"data-action":n.action,"data-html":s.html}).addClass(e).html(s.html).appendTo(u.temp[0]),n.map&&s.$key.attr("data-mapped",n.map),(n.title||t.title)&&s.$key.attr({"data-title":t.title||n.title,title:t.title||n.title}),"function"==typeof h.buildKey&&(o=(s=h.buildKey(u,s)).$key.html(),s.$key.attr("data-html",o)),s.$key},u.customHash=function(e){var t,i,n,s,o=[],a=[];for(i in e=void 0===e?h.customLayout:e)e.hasOwnProperty(i)&&o.push(e[i]);if((n=0)!==(s=(a=a.concat.apply(a,o).join(" ")).length))for(t=0;t<s;t++)n=(n<<5)-n+a.charCodeAt(t),n&=n;return n},u.buildKeyboard=function(e,t){A.isEmptyObject(h.display)&&u.updateLanguage();var i,n,s,o=f.css,a=0,r=f.builtLayouts[e||u.layout||h.layout]={mappedKeys:{},acceptedKeys:[]},l=r.acceptedKeys=h.restrictInclude&&(""+h.restrictInclude).split(/\s+/)||[],c=o.keyboard+" "+h.css.popup+" "+h.css.container+(h.alwaysOpen||h.userClosed?" "+o.alwaysOpen:""),p=A("<div />").addClass(c).attr({role:"textbox"}).hide(),d=A.inArray("{space}",l);return-1<d&&(l[d]=" "),c=t&&"custom"===h.layout||!f.layouts.hasOwnProperty(h.layout)?(h.layout="custom",f.layouts.custom=h.customLayout||{normal:["{cancel}"]}):f.layouts[!t&&(e||u.layout)||h.layout],A.each(c,function(e,t){if(""!==e&&!/^(name|lang|rtl)$/i.test(e))for("default"===e&&(e="normal"),a++,n=A("<div />").attr("name",e).addClass(o.keySet+" "+o.keySet+"-"+e).appendTo(p).toggle("normal"===e),i=0;i<t.length;i++)s=A.trim(t[i]).replace(/\{(\.?)[\s+]?:[\s+]?(\.?)\}/g,"{$1:$2}"),u.buildRow(n,i,s.split(/\s+/),l),n.find("."+o.keyButton+",."+o.keySpacer).filter(":last").after('<br class="'+o.endRow+'"/>')}),1<a&&(u.sets=!0),r.hasMappedKeys=!A.isEmptyObject(r.mappedKeys),r.$keyboard=p},u.buildRow=function(e,t,i,n){for(var s,o,a,r,l,c=f.css,p=0;p<i.length;p++)if(a=!(u.temp=[e,t,p]),0!==i[p].length)if(/^\{\S+\}$/.test(i[p]))if(r=i[p].match(/^\{(\S+)\}$/)[1],/\!\!/.test(r)&&(r=r.replace("!!",""),a=!0),/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i.test(r)&&(l=parseFloat(r.replace(/,/,".").match(/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0),A('<span class="'+c.keyText+'"></span>').width(r.match(/px/i)?l+"px":2*l+"em").addClass(c.keySpacer).appendTo(e)),/^empty(:((\d+)?([\.|,]\d+)?)(em|px)?)?$/i.test(r))l=/:/.test(r)?parseFloat(r.replace(/,/,".").match(/^empty:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0):"",u.addKey(""," ",!0).addClass(h.css.buttonDisabled+" "+h.css.buttonEmpty).attr("aria-disabled",!0).width(l?r.match("px")?l+"px":2*l+"em":"");else if(/^meta[\w-]+\:?(\w+)?/i.test(r))u.addKey(r.split(":")[0],r).addClass(c.keyHasActive);else switch((o=r.split(":"))[0].toLowerCase()){case"a":case"accept":u.addKey("accept",r).addClass(h.css.buttonAction+" "+c.keyAction);break;case"alt":case"altgr":u.addKey("alt",r).addClass(c.keyHasActive);break;case"b":case"bksp":u.addKey("bksp",r);break;case"c":case"cancel":u.addKey("cancel",r).addClass(h.css.buttonAction+" "+c.keyAction);break;case"combo":u.addKey("combo",r).addClass(c.keyHasActive).attr("title",function(e,t){return t+" "+h.display[h.useCombos?"active":"disabled"]}).toggleClass(h.css.buttonActive,h.useCombos);break;case"dec":n.push(u.decimal?".":","),u.addKey("dec",r);break;case"e":case"enter":u.addKey("enter",r).addClass(h.css.buttonAction+" "+c.keyAction);break;case"lock":u.addKey("lock",r).addClass(c.keyHasActive);break;case"s":case"shift":u.addKey("shift",r).addClass(c.keyHasActive);break;case"sign":n.push("-"),u.addKey("sign",r);break;case"space":n.push(" "),u.addKey("space",r);break;case"t":case"tab":u.addKey("tab",r);break;default:f.keyaction.hasOwnProperty(o[0])&&u.addKey(o[0],r).toggleClass(h.css.buttonAction+" "+c.keyAction,a)}else s=i[p],u.addKey(s,s,!0)},u.removeBindings=function(e){A(document).unbind(e),u.el.ownerDocument!==document&&A(u.el.ownerDocument).unbind(e),A(window).unbind(e),u.$el.unbind(e)},u.removeKeyboard=function(){u.$decBtn=[],h.usePreview&&u.$preview.removeData("keyboard"),u.$preview.unbind(u.namespace+"keybindings"),u.preview=null,u.$preview=null,u.$previewCopy=null,u.$keyboard.removeData("keyboard"),u.$keyboard.remove(),u.$keyboard=[],u.isOpen=!1,u.isCurrent(!1)},u.destroy=function(e){var t,i=f.css,n=u.extensionNamespace.length,i=[i.input,i.locked,i.placeholder,i.noKeyboard,i.alwaysOpen,h.css.input,i.isCurrent].join(" ");for(clearTimeout(u.timer),clearTimeout(u.timer2),clearTimeout(u.timer3),u.$keyboard.length&&u.removeKeyboard(),u.options.openOn&&u.removeBindings(u.options.openOn),u.removeBindings(u.namespace),u.removeBindings(u.namespace+"callbacks"),t=0;t<n;t++)u.removeBindings(u.extensionNamespace[t]);u.el.active=!1,u.$el.removeClass(i).removeAttr("aria-haspopup").removeAttr("role").removeData("keyboard"),u=null,"function"==typeof e&&e()},u.init()};return f.keyCodes={backSpace:8,tab:9,enter:13,capsLock:20,escape:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,A:65,Z:90,V:86,C:67,X:88,a:97,z:122},f.css={idSuffix:"_keyboard",initialFocus:"keyboard-init-focus",input:"ui-keyboard-input",inputClone:"ui-keyboard-preview-clone",wrapper:"ui-keyboard-preview-wrapper",preview:"ui-keyboard-preview",keyboard:"ui-keyboard",keySet:"ui-keyboard-keyset",keyButton:"ui-keyboard-button",keyWide:"ui-keyboard-widekey",keyPrefix:"ui-keyboard-",keyText:"ui-keyboard-text",keyHasActive:"ui-keyboard-hasactivestate",keyAction:"ui-keyboard-actionkey",keySpacer:"ui-keyboard-spacer",keyToggle:"ui-keyboard-toggle",keyDisabled:"ui-keyboard-disabled",divWrapperCE:"ui-keyboard-div-wrapper",locked:"ui-keyboard-lockedinput",alwaysOpen:"ui-keyboard-always-open",noKeyboard:"ui-keyboard-nokeyboard",placeholder:"ui-keyboard-placeholder",hasFocus:"ui-keyboard-has-focus",isCurrent:"ui-keyboard-input-current",inputValid:"ui-keyboard-valid-input",inputInvalid:"ui-keyboard-invalid-input",inputAutoAccepted:"ui-keyboard-autoaccepted",endRow:"ui-keyboard-button-endrow"},f.events={kbChange:"keyboardChange",kbBeforeClose:"beforeClose",kbBeforeVisible:"beforeVisible",kbVisible:"visible",kbInit:"initialized",kbInactive:"inactive",kbHidden:"hidden",kbRepeater:"repeater",kbKeysetChange:"keysetChange",inputAccepted:"accepted",inputCanceled:"canceled",inputChange:"change",inputRestricted:"restricted"},f.keyaction={accept:function(e){return e.close(!0),!1},alt:function(e){e.altActive=!e.altActive,e.showSet()},bksp:function(e){e.isContentEditable?(e.execCommand("delete"),e.saveCaret()):e.insertText("\b")},cancel:function(e){return e.close(),!1},clear:function(e){e.$preview[e.isContentEditable?"text":"val"](""),e.$decBtn.length&&e.checkDecimal()},combo:function(e){var t=e.options,i=!t.useCombos,n=e.$keyboard.find("."+f.css.keyPrefix+"combo");return t.useCombos=i,n.toggleClass(t.css.buttonActive,i).attr("title",n.attr("data-title")+" ("+t.display[i?"active":"disabled"]+")"),i&&e.checkCombos(),!1},dec:function(e){e.insertText(e.decimal?".":",")},del:function(e){e.isContentEditable?e.execCommand("forwardDelete"):e.insertText("{d}")},default:function(e){e.shiftActive=e.altActive=e.metaActive=!1,e.showSet()},enter:function(e,t,i){var n=e.options;return i.shiftKey?n.enterNavigation?e.switchInput(!i[n.enterMod],!0):e.close(!0):!n.enterNavigation||e.isTextArea&&!i[n.enterMod]?(e.isTextArea&&A(i.target).closest("button").length&&e.insertText((f.msie?" ":"")+"\n"),void(e.isContentEditable&&!n.enterNavigation&&(e.execCommand("insertHTML","<div></div>"),setTimeout(function(){f.keyaction.right(e),e.saveCaret()},0)))):e.switchInput(!i[n.enterMod],!!n.autoAccept&&"true")},lock:function(e){e.last.keyset[0]=e.shiftActive=e.capsLock=!e.capsLock,e.showSet()},left:function(e){var t=f.caret(e.$preview);0<=t.start-1&&(e.last.start=e.last.end=t.start-1,f.caret(e.$preview,e.last),e.setScroll())},meta:function(e,t){t=A(t);e.metaActive=!t.hasClass(e.options.css.buttonActive),e.showSet(t.attr("data-name"))},next:function(e){return e.switchInput(!0,e.options.autoAccept),!1},normal:function(e){e.shiftActive=e.altActive=e.metaActive=!1,e.showSet()},prev:function(e){return e.switchInput(!1,e.options.autoAccept),!1},right:function(e){var t=f.caret(e.$preview),i=e.isContentEditable?f.getEditableLength(e.el):e.getValue().length;t.end+1<=i&&(e.last.start=e.last.end=t.end+1,f.caret(e.$preview,e.last),e.setScroll())},shift:function(e){e.last.keyset[0]=e.shiftActive=!e.shiftActive,e.showSet()},sign:function(e){var t,i,n;/^[+-]?\d*\.?\d*$/.test(e.getValue())&&(t=f.caret(e.$preview),i=e.getValue(),n=e.isContentEditable?f.getEditableLength(e.el):i.length,e.setValue(-1*i),n=n-i.length,e.last.start=t.start+n,e.last.end=t.end+n,f.caret(e.$preview,e.last),e.setScroll())},space:function(e){e.insertText(" ")},tab:function(e){var t=e.options;if(!e.isTextArea){if(t.tabNavigation)return e.switchInput(!e.shiftActive,!0);if(e.isInput)return!1}e.insertText("\t")},toggle:function(e){e.enabled=!e.enabled,e.toggle()},NBSP:" ",ZWSP:"​",ZWNJ:"‌",ZWJ:"‍",LRM:"‎",RLM:"‏"},f.builtLayouts={},f.layouts={alpha:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} a b c d e f g h i j [ ] \\","k l m n o p q r s ; ' {enter}","{shift} t u v w x y z , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} A B C D E F G H I J { } |",'K L M N O P Q R S : " {enter}',"{shift} T U V W X Y Z < > ? {shift}","{accept} {space} {cancel}"]},qwerty:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {space} {cancel}"]},international:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {alt} {space} {alt} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {alt} {space} {alt} {cancel}"],alt:["~ ¡ ² ³ ¤ € ¼ ½ ¾ ‘ ’ ¥ × {bksp}","{tab} ä å é ® þ ü ú í ó ö « » ¬","á ß ð f g h j k ø ¶ ´ {enter}","{shift} æ x © v b ñ µ ç > ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"],"alt-shift":["~ ¹ ² ³ £ € ¼ ½ ¾ ‘ ’ ¥ ÷ {bksp}","{tab} Ä Å É ® Þ Ü Ú Í Ó Ö « » ¦","Ä § Ð F G H J K Ø ° ¨ {enter}","{shift} Æ X ¢ V B Ñ µ Ç . ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"]},colemak:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w f p g j l u y ; [ ] \\","{bksp} a r s t d h n e i o ' {enter}","{shift} z x c v b k m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W F P G J L U Y : { } |",'{bksp} A R S T D H N E I O " {enter}',"{shift} Z X C V B K M < > ? {shift}","{accept} {space} {cancel}"]},dvorak:{normal:["` 1 2 3 4 5 6 7 8 9 0 [ ] {bksp}","{tab} ' , . p y f g c r l / = \\","a o e u i d h t n s - {enter}","{shift} ; q j k x b m w v z {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) { } {bksp}",'{tab} " < > P Y F G C R L ? + |',"A O E U I D H T N S _ {enter}","{shift} : Q J K X B M W V Z {shift}","{accept} {space} {cancel}"]},num:{normal:["= ( ) {b}","{clear} / * -","7 8 9 +","4 5 6 {sign}","1 2 3 %","0 {dec} {a} {c}"]}},f.language={en:{display:{a:"✔:Accept (Shift+Enter)",accept:"Accept:Accept (Shift+Enter)",alt:"Alt:⌥ AltGr",b:"⌫:Backspace",bksp:"Bksp:Backspace",c:"✖:Cancel (Esc)",cancel:"Cancel:Cancel (Esc)",clear:"C:Clear",combo:"ö:Toggle Combo Keys",dec:".:Decimal",e:"⏎:Enter",empty:" ",enter:"Enter:Enter ⏎",left:"←",lock:"Lock:⇪ Caps Lock",next:"Next ⇨",prev:"⇦ Prev",right:"→",s:"⇧:Shift",shift:"Shift:Shift",sign:"±:Change Sign",space:" :Space",t:"⇥:Tab",tab:"⇥ Tab:Tab",toggle:" ",valid:"valid",invalid:"invalid",active:"active",disabled:"disabled"},wheelMessage:"Use mousewheel to see other keys",comboRegex:/([`\'~\^\"ao])([a-z])/gim,combos:{"`":{a:"à",A:"À",e:"è",E:"È",i:"ì",I:"Ì",o:"ò",O:"Ò",u:"ù",U:"Ù",y:"ỳ",Y:"Ỳ"},"'":{a:"á",A:"Á",e:"é",E:"É",i:"í",I:"Í",o:"ó",O:"Ó",u:"ú",U:"Ú",y:"ý",Y:"Ý"},'"':{a:"ä",A:"Ä",e:"ë",E:"Ë",i:"ï",I:"Ï",o:"ö",O:"Ö",u:"ü",U:"Ü",y:"ÿ",Y:"Ÿ"},"^":{a:"â",A:"Â",e:"ê",E:"Ê",i:"î",I:"Î",o:"ô",O:"Ô",u:"û",U:"Û",y:"ŷ",Y:"Ŷ"},"~":{a:"ã",A:"Ã",e:"ẽ",E:"Ẽ",i:"ĩ",I:"Ĩ",o:"õ",O:"Õ",u:"ũ",U:"Ũ",y:"ỹ",Y:"Ỹ",n:"ñ",N:"Ñ"}}}},f.defaultOptions={language:null,rtl:!1,layout:"qwerty",customLayout:null,position:{of:null,my:"center top",at:"center top",at2:"center bottom"},reposition:!0,usePreview:!0,alwaysOpen:!1,initialFocus:!0,noFocus:!1,stayOpen:!1,userClosed:!1,ignoreEsc:!1,closeByClickEvent:!1,css:{input:"ui-widget-content ui-corner-all",container:"ui-widget-content ui-widget ui-corner-all ui-helper-clearfix",popup:"",buttonDefault:"ui-state-default ui-corner-all",buttonHover:"ui-state-hover",buttonAction:"ui-state-active",buttonActive:"ui-state-active",buttonDisabled:"ui-state-disabled",buttonEmpty:"ui-keyboard-empty"},autoAccept:!1,autoAcceptOnEsc:!1,lockInput:!1,restrictInput:!1,restrictInclude:"",acceptValid:!1,autoAcceptOnValid:!1,checkValidOnInit:!0,cancelClose:!0,tabNavigation:!1,enterNavigation:!1,enterMod:"altKey",stopAtEnd:!0,appendLocally:!1,appendTo:"body",wrapBRs:!0,stickyShift:!0,preventPaste:!1,caretToEnd:!1,scrollAdjustment:10,maxLength:!1,maxInsert:!0,repeatDelay:500,repeatRate:20,resetDefault:!0,openOn:"focus",activeOnReadonly:!1,keyBinding:"mousedown touchstart",useWheel:!0,useCombos:!0,validate:function(){return!0}},f.comboRegex=/([`\'~\^\"ao])([a-z])/gim,f.currentKeyboard="",A('\x3c!--[if lte IE 8]><script>jQuery("body").addClass("oldie");<\/script><![endif]--\x3e\x3c!--[if IE]><script>jQuery("body").addClass("ie");<\/script><![endif]--\x3e').appendTo("body").remove(),f.msie=A("body").hasClass("oldie"),f.allie=A("body").hasClass("ie"),f.watermark=void 0!==document.createElement("input").placeholder,f.checkCaretSupport=function(){var e;return"boolean"!=typeof f.checkCaret&&(e=A('<div style="height:0px;width:0px;overflow:hidden;position:fixed;top:0;left:-100px;"><input type="text" value="testing"/></div>').prependTo("body"),f.caret(e.find("input"),3,3),f.checkCaret=3!==f.caret(e.find("input").hide().show()).start,e.remove()),f.checkCaret},f.caret=function(e,t,i){var n,s,o,a,r;return e&&e.length&&!e.is(":hidden")&&"hidden"!==e.css("visibility")?(a=(a=e.data("keyboard"))&&a.options.noFocus,r=/(textarea|input)/i.test(e[0].nodeName),a||e.focus(),void 0!==t?("object"===(void 0===t?"undefined":c(t))&&"start"in t&&"end"in t?(n=t.start,s=t.end):void 0===i&&(i=t),"number"==typeof t&&"number"==typeof i?(n=t,s=i):"start"===t?n=s=0:"string"==typeof t&&(n=s="end"),r?e.caret(n,s,a):f.setEditableCaret(e,n,s)):(i=r?e.caret():f.getEditableCaret(e[0]),n=i.start,s=i.end,o=r&&e[0].value||e.text()||"",{start:n,end:s,text:o.substring(n,s),replaceStr:function(e){return o.substring(0,n)+e+o.substring(s,o.length)}})):{}},f.isTextNode=function(e){return e&&3===e.nodeType},f.isBlock=function(e,t){var i=e.ownerDocument.defaultView;return t&&1===t.nodeType&&t!==e&&"block"===i.getComputedStyle(t).display?1:0},f.wrapBRs=function(n){var e=A(n).find("br:not(."+f.css.divWrapperCE+")");e.length&&A.each(e,function(e,t){var i=t.parentNode.childNodes.length;1===i&&(1!==i||f.isBlock(n,t.parentNode))||A(t).addClass(f.css.divWrapperCE).wrap("<div>")})},f.getEditableCaret=function(l){var e,c,t,i,n;return(l=A(l)[0]).isContentEditable?(c=(A(l).data("keyboard")||{}).options,n=(i=s((t=l.ownerDocument.getSelection().getRangeAt(0)).startContainer,t.startOffset)).position,!1!==c.wrapBRs&&f.wrapBRs(l),t=t.endContainer===t.startContainer&&t.endOffset===t.startOffset?(e=n,""):(e=(i=s(t.endContainer,t.endOffset)).position,i.text.substring(n,e)),{start:n,end:e,text:t}):{};function s(e,t){var i,n="",s=!1,o=0,a=A.makeArray(l.childNodes);function r(e){e&&(o+=e,n+=c&&c.replaceCR||"\n")}for(;!s&&a.length;){if((i=a.shift())===e&&(s=!0),r(f.isBlock(l,i.previousSibling)),f.isTextNode(i)){if(o+=s?t:i.length,n+=i.textContent,s)return{position:o,text:n}}else!s&&i.childNodes&&(a=A.makeArray(i.childNodes).concat(a));r(f.isTextNode(i.previousSibling)&&f.isBlock(l,i))}return{position:o,text:n}}},f.getEditableLength=function(e){e=f.setEditableCaret(e,"getMax");return"number"==typeof e?e:null},f.setEditableCaret=function(d,e,t){if(!(d=A(d)[0]).isContentEditable)return{};var i=d.ownerDocument,n=i.createRange(),i=i.getSelection(),h=(A(d).data("keyboard")||{}).options,s=e,o=t,a="",r=l("getMax"===e?"end":e);function l(i){"end"===i?i=d.innerHTML.length:i<0&&(i=0);var e,t,n="",s=!1,o=0,a=0,r=0,l=A.makeArray(d.childNodes);function c(e){return n+=e?h&&h.replaceCR||"\n":"",0<e}function p(e){var t=o+e;return a=r,r+=e,0<=i-t?i-(o=t)<=0:i-t<=0}for(;!s&&l.length;)if(e=l.shift(),c(t=f.isBlock(d,e.previousSibling))&&p(t)&&(s=!0),c(t=f.isTextNode(e.previousSibling)&&f.isBlock(d,e))&&p(t)&&(s=!0),f.isTextNode(e)){if(n+=e.textContent,p(e.length))return{node:e,offset:t=i-o==0&&1<=o-a?e.length:i-o,position:i,text:n}}else!s&&e.childNodes&&(l=A.makeArray(e.childNodes).concat(l));return l.length?{node:e,offset:i-o,position:i,text:n}:{node:e,offset:e&&e.length||0,position:r,text:n}}if(r.node){if(s=r.position,"getMax"===e)return s;n.setStart(r.node,r.offset),(r=void 0!==t&&t!==e?l(t):r).node&&(o=r.position,n.setEnd(r.node,r.offset),a=s===o?"":r.text.substring(s,o)),i.removeAllRanges(),i.addRange(n)}return{start:s,end:o,text:a}},f.replaceContent=function(e,t){e=A(e)[0];for(var i,n,s,o=void 0===t?"undefined":c(t),a=f.getEditableCaret(e).start,r=0,l=[e];i=l.pop();)if(f.isTextNode(i))"function"===o?r<=a&&a<=r+i.length&&(i.textContent=t(i.textContent)):"string"===o&&(s=t.substring(r,r+i.length))!==i.textContent&&(i.textContent=s),r+=i.length;else if(i&&i.childNodes)for(n=i.childNodes.length;n--;)l.push(i.childNodes[n]);n=f.getEditableCaret(e),f.setEditableCaret(e,n.start,n.start)},A.fn.keyboard=function(e){return this.each(function(){A(this).data("keyboard")||new A.keyboard(this,e)})},A.fn.getkeyboard=function(){return this.data("keyboard")},A.fn.caret=function(t,i,e){if(void 0===this[0]||this.is(":hidden")||"hidden"===this.css("visibility")||!/(INPUT|TEXTAREA)/i.test(this[0].nodeName))return this;var n,s,o,a=this,r=a[0],l=r.ownerDocument.selection,c=r.scrollTop,p=!1,d=!0;try{p="selectionStart"in r}catch(e){d=!1}return d&&void 0!==t?(/(email|number)/i.test(r.type)||(p?(r.selectionStart=t,r.selectionEnd=i):((d=r.createTextRange()).collapse(!0),d.moveStart("character",t),d.moveEnd("character",i-t),d.select())),e||!a.is(":visible")&&"hidden"===a.css("visibility")||r.focus(),r.scrollTop=c,this):(/(email|number)/i.test(r.type)?t=i=a.val().length:p?(t=r.selectionStart,i=r.selectionEnd):l?i="TEXTAREA"===r.nodeName.toUpperCase()?(o=a.val(),(d=(n=l.createRange()).duplicate()).moveToElementText(r),d.setEndPoint("EndToEnd",n),(t=d.text.replace(/\r/g,"\n").length)+n.text.replace(/\r/g,"\n").length):(o=a.val().replace(/\r/g,"\n"),(n=l.createRange().duplicate()).moveEnd("character",o.length),t=""===n.text?o.length:o.lastIndexOf(n.text),(n=l.createRange().duplicate()).moveStart("character",-o.length),n.text.length):t=i=(r.value||"").length,s=r.value||"",{start:t,end:i,text:s.substring(t,i),replace:function(e){return s.substring(0,t)+e+s.substring(i,s.length)}})},f},"object"===c(e)&&"object"===c(e.exports)?e.exports=t(n):t(jQuery)}),t(function(e){var t,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t=function(s){s.fn.addTyping=function(e){var t={showTyping:!0,lockTypeIn:!1,delay:250,hoverDelay:250},c=s.keyboard;return this.each(function(){var r,l=s(this).data("keyboard");l&&(r=l.typing_options=s.extend({},t,e),l.typing_keymap={" ":"space",'"':"34","'":"39","&nbsp;":"space","\b":"bksp","{b}":"bksp","{d}":"del","{l}":"left","{r}":"right","\n":"enter","\r":"enter","{e}":"enter","\t":"tab","{t}":"tab"},l.typing_xref={8:"bksp",9:"tab",13:"enter",32:"space",37:"left",39:"right",46:"del"},l.typing_event=!1,l.typing_namespace=l.namespace+"typing",l.extensionNamespace.push(l.typing_namespace),r.savedLockInput=l.options.lockInput,l.typing_setup_reset=function(){var e=c.events,t=l.typing_namespace,e=[e.kbHidden,e.kbInactive,""].join(t+" ");l.$el.unbind(t).bind(e,function(){l.typing_reset()}),l.unbindButton(t).bindButton("mousedown"+t,function(){l.typing_reset()})},l.typing_setup=function(){var e=l.typing_namespace;l.typing_setup_reset(),l.$el.bind(c.events.kbBeforeVisible+e,function(){l.typing_setup()}),l.$preview.unbind(e).bind("keyup"+e,function(e){if(r.init&&r.lockTypeIn||!r.showTyping)return!1;37<=e.which&&e.which<=40||(16===e.which&&(l.shiftActive=!1),18===e.which&&(l.altActive=!1),16!==e.which&&18!==e.which||(l.showSet(),setTimeout(function(){l.$preview&&l.$preview.focus()},200)))}).bind("keydown"+e,function(e){if(r.init&&r.lockTypeIn||!r.showTyping)return!1;e.temp=!1,16===e.which&&(e.temp=!l.shiftActive,l.shiftActive=!0),18===e.which&&(e.temp=!l.altActive,l.altActive=!0),e.temp&&(l.showSet(),l.$preview.focus()),l.typing_event=!0,l.typing_xref[e.which]&&l.typing_findKey("",e)}).bind("keypress"+e,function(e){if(r.init&&r.lockTypeIn)return!1;l.typing_event&&!l.options.lockInput&&(l.typing_reset(),l.typing_event=!0,l.typing_findKey("",e))})},l.typing_reset=function(){l.typing_event=r.init=!1,r.text="",r.len=r.current=0,l.options.lockInput=r.savedLockInput},l.typeIn=function(e,t,i,n){l.isVisible()?l.typing_event?void 0===e&&(l.typing_event=!1,l.options.lockInput=r.savedLockInput):(!0!==r.init&&(r.init=!0,l.options.lockInput=r.lockTypeIn,r.text=e||r.text||"",r.len=r.text.length,r.delay=t||r.delay,r.current=0,i&&(r.callback=i)),"{"===(e=r.text.substring(r.current,++r.current))&&"}"===r.text.substring(r.current+1,r.current+2)&&(e+=r.text.substring(r.current,r.current+=2)),l.typing_findKey(e,n)):(clearTimeout(l.typing_timer),l.typing_reset())},l.typing_findKey=function(e,t){var i,n,s,o=c.css,a=c.builtLayouts[l.layout].mappedKeys;l.isOpen&&l.$keyboard.length&&(n=l.$keyboard.find("."+o.keySet),s=e in l.typing_keymap?l.typing_keymap[e]:e,s="."+o.keyButton+'[data-action="'+s+'"]',l.typing_event&&t&&(s="keypress"!==t.type&&l.typing_xref.hasOwnProperty(t.keyCode||t.which)?"."+o.keyPrefix+l.processName(l.typing_xref[t.keyCode||t.which]):(i=String.fromCharCode(t.charCode||t.which),a.hasOwnProperty(i)?"."+o.keyButton+'[data-value="'+a[i].replace(/"/g,'\\"')+'"]':"."+o.keyPrefix+l.processName(i))),(a=n.filter(":visible").find(s)).length?l.typing_simulateKey(a,e,t):(s=(a=l.typing_event?n.find(s):(i=e in l.typing_keymap?l.typing_keymap[e]:l.processName(e),n.find("."+o.keyPrefix+i))).closest("."+o.keySet)).attr("name")?(r.showTyping&&(n=s.attr("name"),l.shiftActive=/shift/.test(n),l.altActive=/alt/.test(n),l.metaActive=l.last.keyset[2]=!!/\bmeta/.test(n)&&n.match(/meta[\w-]+/)[0],l.showSet(l.metaActive)),l.typing_simulateKey(a,e,t)):l.typing_event||(e in l.typing_keymap&&l.typing_keymap[e]in c.keyaction?c.keyaction[l.typing_keymap[e]](l,a,t):l.insertText(e),l.checkCombos(),l.$el.trigger(c.events.kbChange,[l,l.el])),r.current<=r.len&&0!==r.len?l.isVisible()&&(l.typing_timer=setTimeout(function(){l.typeIn()},r.delay)):0!==r.len?(l.typing_reset(),"function"==typeof r.callback&&(l.typing_timer=setTimeout(function(){"function"==typeof r.callback&&r.callback(l)},r.delay))):l.typing_reset())},l.typing_simulateKey=function(e,t,i){var n=e.length;l.isVisible()&&(r.showTyping&&n&&(e.filter(":visible").trigger("mouseenter"+l.namespace),r.showTyping&&n&&setTimeout(function(){e.trigger("mouseleave"+l.namespace)},Math.min(r.hoverDelay,r.delay))),l.typing_event||setTimeout(function(){t in l.typing_keymap&&l.typing_keymap[t]in c.keyaction?((i=i||s.Event("keypress")).target=e,c.keyaction[l.typing_keymap[t]](l,e,i)):l.insertText(t),l.checkCombos(),l.$el.trigger(c.events.kbChange,[l,l.el])},r.delay/3))},r.showTyping&&l.options.alwaysOpen&&l.isVisible()?l.typing_setup():l.$el.unbind(c.events.kbBeforeVisible+l.typing_namespace).bind(c.events.kbBeforeVisible+l.typing_namespace,function(){r.showTyping?l.typing_setup():l.typing_setup_reset()}))})}},"object"===i(e)&&"object"===i(e.exports)?e.exports=t(n):t(jQuery)}),t(function(e){var t,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t=function(e){if(void 0===e)throw new Error("jQuery.textcomplete requires jQuery");var o,a,r,n,s,l,c,p,d,h,i,u,A,f,g,m,b,y,v,k;function w(e,t){if(this.$el=r(e),this.id="textcomplete"+c++,this.strategies=[],this.views=[],this.option=r.extend({},w.defaults,t),!(this.$el.is("input[type=text]")||this.$el.is("input[type=search]")||this.$el.is("textarea")||e.isContentEditable||"true"==e.contentEditable))throw new Error("textcomplete must be called on a Textarea or a ContentEditable.");var i;e===e.ownerDocument.activeElement?this.initialize():(i=this).$el.one("focus."+this.id,function(){i.initialize()})}function x(e,t,i){this.$el=x.createElement(i),this.completer=t,this.id=t.id+"dropdown",this._data=[],this.$inputEl=p(e),(this.option=i).listPosition&&(this.setPosition=i.listPosition),i.height&&this.$el.height(i.height);var n=this;p.each(["maxCount","placement","footer","header","noResultsMessage","className"],function(e,t){null!=i[t]&&(n[t]=i[t])}),this._bindEvents(e),h[this.id]=this}function C(e){var n,s;u.extend(this,e),this.cache&&(this.search=(n=this.search,s={},function(t,i){s[t]?i(s[t]):n.call(this,t,function(e){s[t]=(s[t]||[]).concat(e),i.apply(null,arguments)})}))}function t(){}function _(e,t,i){this.initialize(e,t,i)}function E(e,t,i){this.initialize(e,t,i),g("<span>吶</span>").css({position:"absolute",top:-9999,left:-9999}).insertBefore(e)}function B(e,t,i){this.initialize(e,t,i)}function I(e,t,i){this.initialize(e,t,i)}return a=1,(o=e).fn.textcomplete=function(t,i){var s=Array.prototype.slice.call(arguments);return this.each(function(){var e=o(this),n=e.data("textComplete");n||((i=i||{})._oid=a++,n=new o.fn.textcomplete.Completer(this,i),e.data("textComplete",n)),"string"==typeof t?n&&(s.shift(),n[t].apply(n,s),"destroy"===t&&e.removeData("textComplete")):(o.each(t,function(i){o.each(["header","footer","placement","maxCount"],function(e){var t;i[e]&&(n.option[e]=i[e],t=e+"as a strategy param is deprecated. Use option.",console.warn&&console.warn(t),delete i[e])})}),n.register(o.fn.textcomplete.Strategy.parse(t,{el:this,$el:e})))})},r=e,c=0,w.defaults={appendTo:"body",className:"",dropdownClassName:"dropdown-menu textcomplete-dropdown",maxCount:12,zIndex:"999999",rightEdgeOffset:30},r.extend(w.prototype,{id:null,option:null,strategies:null,adapter:null,dropdown:null,$el:null,$iframe:null,initialize:function(){var e,t=this.$el.get(0);if(this.$el.prop("ownerDocument")!==document&&window.frames.length)for(var i=0;i<window.frames.length;i++)if(this.$el.prop("ownerDocument")===window.frames[i].document){this.$iframe=r(window.frames[i].frameElement);break}this.dropdown=new r.fn.textcomplete.Dropdown(t,this,this.option),e=this.option.adapter||(e=this.$el.is("textarea")||this.$el.is("input[type=text]")||this.$el.is("input[type=search]")?"number"==typeof t.selectionEnd?"Textarea":"IETextarea":"ContentEditable",r.fn.textcomplete[e]),this.adapter=new e(t,this,this.option)},destroy:function(){this.$el.off("."+this.id),this.adapter&&this.adapter.destroy(),this.dropdown&&this.dropdown.destroy(),this.$el=this.adapter=this.dropdown=null},deactivate:function(){this.dropdown&&this.dropdown.deactivate()},activate:function(){this.dropdown&&this.dropdown.activate()},trigger:function(e,t){this.dropdown||this.initialize(),null==e&&(e=this.adapter.getTextFromHeadToCaret());var i,e=this._extractSearchQuery(e);e.length?(i=e[1],t&&this._term===i&&""!==i||(this._term=i,this._search.apply(this,e))):(this._term=null,this.dropdown.deactivate())},fire:function(e){var t=Array.prototype.slice.call(arguments,1);return this.$el.trigger(e,t),this},register:function(e){Array.prototype.push.apply(this.strategies,e)},select:function(e,t,i){this._term=null,this.adapter.select(e,t,i),this.fire("click change").fire("textComplete:select",e,t),this.adapter.focus()},_clearAtNext:!0,_term:null,_extractSearchQuery:function(e){for(var t=0;t<this.strategies.length;t++){var i=this.strategies[t],n=i.context(e);if(n||""===n){var s=r.isFunction(i.match)?i.match(e):i.match,n=(e="[object String]"===Object.prototype.toString.call(n)?n:e).match(s);if(n)return[i,n[i.index],n]}}return[]},_search:(n=function(i,n,s,e){var o=this;n.search(s,function(e,t){o.dropdown.shown||o.dropdown.activate(),o._clearAtNext&&(o.dropdown.clear(),o._clearAtNext=!1),o.dropdown.setPosition(o.adapter.getCaretPosition()),o.dropdown.render(o._zip(e,n,s)),t||(i(),o._clearAtNext=!0)},e)},function(){var i,e=Array.prototype.slice.call(arguments);s?l=e:(s=!0,i=this,e.unshift(function e(){var t;l?(t=l,l=void 0,t.unshift(e),n.apply(i,t)):s=!1}),n.apply(this,e))}),_zip:function(e,t,i){return r.map(e,function(e){return{value:e,strategy:t,term:i}})}}),r.fn.textcomplete.Completer=w,d=(p=e)(window),h={},p(document).on("click",function(e){var i=e.originalEvent&&e.originalEvent.keepTextCompleteDropdown;p.each(h,function(e,t){e!==i&&t.deactivate()})}),i={SKIP_DEFAULT:0,KEY_UP:1,KEY_DOWN:2,KEY_ENTER:3,KEY_PAGEUP:4,KEY_PAGEDOWN:5,KEY_ESCAPE:6,KEY_SPACE:7},p.extend(x,{createElement:function(e){var t=e.appendTo;return t instanceof p||(t=p(t)),p("<ul></ul>").addClass(e.dropdownClassName).attr("id","textcomplete-dropdown-"+e._oid).css({display:"initial",left:0,position:"absolute",zIndex:e.zIndex}).appendTo(t)}}),p.extend(x.prototype,{$el:null,$inputEl:null,completer:null,footer:null,header:null,id:null,maxCount:null,placement:"",shown:!1,data:[],className:"",destroy:function(){this.deactivate(),this.$el.off("."+this.id),this.$inputEl.off("."+this.id),this.clear(),this.$el.remove(),this.$el=this.$inputEl=this.completer=null,delete h[this.id]},render:function(e){var t=this._buildContents(e),i=p.map(e,function(e){return e.value});e.length?((e=e[0].strategy).id?this.$el.attr("data-strategy",e.id):this.$el.removeAttr("data-strategy"),this._renderHeader(i),this._renderFooter(i),t&&(this._renderContents(t),this._fitToBottom(),this._fitToRight(),this._activateIndexedItem()),this._setScroll()):this.noResultsMessage?this._renderNoResultsMessage(i):this.shown&&this.deactivate()},setPosition:function(e){var t="absolute";return this.$inputEl.add(this.$inputEl.parents()).each(function(){return"absolute"!==p(this).css("position")&&("fixed"===p(this).css("position")?(e.top-=d.scrollTop(),e.left-=d.scrollLeft(),!(t="fixed")):void 0)}),d.height()-e.top<210&&0<d.height()-e.top&&(e.top-=210),this.$el.css(this._applyPlacement(e)),this.$el.css({position:t}),this},clear:function(){this.$el.html(""),this.data=[],this._index=0,this._$header=this._$footer=this._$noResultsMessage=null},activate:function(){return this.shown||(this.clear(),this.$el.show(),this.className&&this.$el.addClass(this.className),this.completer.fire("textComplete:show"),this.shown=!0),this},deactivate:function(){return this.shown&&(this.$el.hide(),this.className&&this.$el.removeClass(this.className),this.completer.fire("textComplete:hide"),this.shown=!1),this},isUp:function(e){return 38===e.keyCode||e.ctrlKey&&80===e.keyCode},isDown:function(e){return 40===e.keyCode||e.ctrlKey&&78===e.keyCode},isEnter:function(e){return 13===e.keyCode||9===e.keyCode||32===e.keyCode||" "===e.key},isPageup:function(e){return 33===e.keyCode},isPagedown:function(e){return 34===e.keyCode},isEscape:function(e){return 27===e.keyCode},_data:null,_index:null,_$header:null,_$noResultsMessage:null,_$footer:null,_bindEvents:function(){this.$el.on("mousedown."+this.id,".textcomplete-item",p.proxy(this._onClick,this)),this.$el.on("touchstart."+this.id,".textcomplete-item",p.proxy(this._onClick,this)),this.$el.on("mouseover."+this.id,".textcomplete-item",p.proxy(this._onMouseover,this)),this.$inputEl.on("keydown."+this.id,p.proxy(this._onKeydown,this))},_onClick:function(e){var t=p(e.target),t=(e.preventDefault(),e.originalEvent.keepTextCompleteDropdown=this.id,t.hasClass("textcomplete-item")||(t=t.closest(".textcomplete-item")),this.data[parseInt(t.data("index"),10)]),i=(this.completer.select(t.value,t.strategy,e),this);setTimeout(function(){i.deactivate(),"touchstart"===e.type&&i.$inputEl.focus()},0)},_onMouseover:function(e){var t=p(e.target);e.preventDefault(),t.hasClass("textcomplete-item")||(t=t.closest(".textcomplete-item")),this._index=parseInt(t.data("index"),10),this._activateIndexedItem()},_onKeydown:function(e){var t;if(this.shown)switch(t=null==(t=p.isFunction(this.option.onKeydown)?this.option.onKeydown(e,i):t)?this._defaultKeydown(e):t){case i.KEY_UP:e.preventDefault(),this._up();break;case i.KEY_DOWN:e.preventDefault(),this._down();break;case i.KEY_ENTER:case i.KEY_SPACE:e.preventDefault(),this._enter(e);break;case i.KEY_PAGEUP:e.preventDefault(),this._pageup();break;case i.KEY_PAGEDOWN:e.preventDefault(),this._pagedown();break;case i.KEY_ESCAPE:e.preventDefault(),this.deactivate()}},_defaultKeydown:function(e){return this.isUp(e)?i.KEY_UP:this.isDown(e)?i.KEY_DOWN:this.isEnter(e)?i.KEY_ENTER:this.isPageup(e)?i.KEY_PAGEUP:this.isPagedown(e)?i.KEY_PAGEDOWN:this.isEscape(e)?i.KEY_ESCAPE:void 0},_up:function(){0===this._index?this._index=this.data.length-1:--this._index,this._activateIndexedItem(),this._setScroll()},_down:function(){this._index===this.data.length-1?this._index=0:this._index+=1,this._activateIndexedItem(),this._setScroll()},_enter:function(t){var i=this,e=this.data[parseInt(this._getActiveElement().data("index"),10)];e.value===e.term?setTimeout(function(){var e=i.data[parseInt(i._getActiveElement().data("index"),10)];i.completer.select(e.value,e.strategy,t),i.deactivate()},150):(this.completer.select(e.value,e.strategy,t),this.deactivate())},_pageup:function(){var t=0,i=this._getActiveElement().position().top-this.$el.innerHeight();this.$el.children().each(function(e){if(p(this).position().top+p(this).outerHeight()>i)return t=e,!1}),this._index=t,this._activateIndexedItem(),this._setScroll()},_pagedown:function(){var t=this.data.length-1,i=this._getActiveElement().position().top+this.$el.innerHeight();this.$el.children().each(function(e){if(p(this).position().top>i)return t=e,!1}),this._index=t,this._activateIndexedItem(),this._setScroll()},_activateIndexedItem:function(){this.$el.find(".textcomplete-item.active").removeClass("active"),this._getActiveElement().addClass("active")},_getActiveElement:function(){return this.$el.children(".textcomplete-item:nth("+this._index+")")},_setScroll:function(){var e=this._getActiveElement(),t=e.position().top,e=e.outerHeight(),i=this.$el.innerHeight(),n=this.$el.scrollTop();0===this._index||this._index==this.data.length-1||t<0?this.$el.scrollTop(t+n):i<t+e&&this.$el.scrollTop(t+e+n-i)},_buildContents:function(e){for(var t,i,n="",s=0;s<e.length&&this.data.length!==this.maxCount;s++)t=e[s],function(e,t){for(var i,n=t.strategy.idProperty,s=0;s<e.length;s++)if((i=e[s]).strategy===t.strategy)if(n){if(i.value[n]===t.value[n])return!0}else if(i.value===t.value)return!0;return!1}(this.data,t)||(i=this.data.length,this.data.push(t),n=(n+='<li class="textcomplete-item" data-index="'+i+'"><a>')+t.strategy.template(t.value,t.term)+"</a></li>");return n},_renderHeader:function(e){this.header&&(this._$header||(this._$header=p('<li class="textcomplete-header"></li>').prependTo(this.$el)),e=p.isFunction(this.header)?this.header(e):this.header,this._$header.html(e))},_renderFooter:function(e){this.footer&&(this._$footer||(this._$footer=p('<li class="textcomplete-footer"></li>').appendTo(this.$el)),e=p.isFunction(this.footer)?this.footer(e):this.footer,this._$footer.html(e))},_renderNoResultsMessage:function(e){this.noResultsMessage&&(this._$noResultsMessage||(this._$noResultsMessage=p('<li class="textcomplete-no-results-message"></li>').appendTo(this.$el)),e=p.isFunction(this.noResultsMessage)?this.noResultsMessage(e):this.noResultsMessage,this._$noResultsMessage.html(e))},_renderContents:function(e){this._$footer?this._$footer.before(e):this.$el.append(e)},_fitToBottom:function(){var e=d.scrollTop()+d.height(),t=this.$el.height();this.$el.position().top+t>e&&(this.completer.$iframe||this.$el.offset({top:e-t}))},_fitToRight:function(){for(var e,t=this.option.rightEdgeOffset,i=this.$el.offset().left,n=this.$el.width(),s=d.width()-t;s<i+n&&0<s&&(this.$el.offset({left:i-t}),!(i<=(e=this.$el.offset().left)));)i=e},_applyPlacement:function(e){return-1!==this.placement.indexOf("top")?e={top:"auto",bottom:this.$el.parent().height()-e.top+e.lineHeight,left:e.left}:(e.bottom="auto",delete e.lineHeight),-1!==this.placement.indexOf("absleft")?e.left=0:-1!==this.placement.indexOf("absright")&&(e.right=0,e.left="auto"),e}}),p.fn.textcomplete.Dropdown=x,p.extend(p.fn.textcomplete,i),u=e,C.parse=function(e,t){return u.map(e,function(e){e=new C(e);return e.el=t.el,e.$el=t.$el,e})},u.extend(C.prototype,{match:null,replace:null,search:null,id:null,cache:!1,context:function(){return!0},index:2,template:function(e){return e},idProperty:null}),u.fn.textcomplete.Strategy=C,(A=e).extend(t.prototype,{id:null,completer:null,el:null,$el:null,option:null,initialize:function(e,t,i){var n;this.el=e,this.$el=A(e),this.id=t.id+this.constructor.name,this.completer=t,this.option=i,this.option.debounce&&(this._onKeyup=(n=this._onKeyup,this.option.debounce,function(){return n.apply(this,arguments)})),this._bindEvents()},destroy:function(){this.$el.off("."+this.id),this.$el=this.el=this.completer=null},select:function(){throw new Error("Not implemented")},getCaretPosition:function(){var e=this._getCaretRelativePosition(),t=this.$el.offset(),i=this.option.appendTo;return i&&(i=(i=i instanceof A?i:A(i)).offsetParent().offset(),t.top-=i.top,t.left-=i.left),e.top+=t.top,e.left+=t.left,e},focus:function(){this.$el.focus()},_bindEvents:function(){this.$el.on("keyup."+this.id,A.proxy(this._onKeyup,this)),this.$el.on("click."+this.id,A.proxy(this._onClick1,this))},_onKeyup:function(e){this._skipSearch(e)||this.completer.trigger(this.getTextFromHeadToCaret(),!0)},_onClick1:function(e){this._skipSearch(e)||this.completer.trigger(this.getTextFromHeadToCaret(),!0)},_skipSearch:function(e){switch(e.keyCode){case 9:case 13:case 16:case 17:case 18:case 33:case 34:case 40:case 38:case 27:return!0}if(e.ctrlKey)switch(e.keyCode){case 78:case 80:return!0}}}),A.fn.textcomplete.Adapter=t,(f=e).extend(_.prototype,f.fn.textcomplete.Adapter.prototype,{select:function(e,t,i){var n=this.getTextFromHeadToCaret(),s=this.el.value.substring(this.el.selectionEnd),e=t.replace(e,i);void 0!==e&&(f.isArray(e)&&(s=e[1]+s,e=e[0]),i=f.isFunction(t.match)?t.match(n):t.match,n=n.replace(i,e),this.$el.val(n+s),this.el.selectionStart=this.el.selectionEnd=n.length)},getTextFromHeadToCaret:function(){return this.el.value.substring(0,this.el.selectionEnd)},_getCaretRelativePosition:function(){var e=f.fn.textcomplete.getCaretCoordinates(this.el,this.el.selectionStart);return{top:e.top+this._calculateLineHeight()-this.$el.scrollTop(),left:e.left-this.$el.scrollLeft(),lineHeight:this._calculateLineHeight()}},_calculateLineHeight:function(){var e,t,i,n=parseInt(this.$el.css("line-height"),10);return isNaN(n)&&(e=this.el.parentNode,t=document.createElement(this.el.nodeName),i=this.el.style,t.setAttribute("style","margin:0px;padding:0px;font-family:"+i.fontFamily+";font-size:"+i.fontSize),t.innerHTML="test",e.appendChild(t),n=t.clientHeight,e.removeChild(t)),n}}),f.fn.textcomplete.Textarea=_,(g=e).extend(E.prototype,g.fn.textcomplete.Textarea.prototype,{select:function(e,t,i){var n=this.getTextFromHeadToCaret(),s=this.el.value.substring(n.length),e=t.replace(e,i);void 0!==e&&(g.isArray(e)&&(s=e[1]+s,e=e[0]),i=g.isFunction(t.match)?t.match(n):t.match,n=n.replace(i,e),this.$el.val(n+s),this.el.focus(),(t=this.el.createTextRange()).collapse(!0),t.moveEnd("character",n.length),t.moveStart("character",n.length),t.select())},getTextFromHeadToCaret:function(){this.el.focus();var e=document.selection.createRange(),e=(e.moveStart("character",-this.el.value.length),e.text.split("吶"));return 1===e.length?e[0]:e[1]}}),g.fn.textcomplete.IETextarea=E,(m=e).extend(B.prototype,m.fn.textcomplete.Adapter.prototype,{select:function(e,t,i){var n=this.getTextFromHeadToCaret(),s=this.el.ownerDocument.getSelection(),o=s.getRangeAt(0),a=o.cloneRange();a.selectNodeContents(o.startContainer);a=a.toString().substring(o.startOffset),e=t.replace(e,i);if(void 0!==e){m.isArray(e)&&(a=e[1]+a,e=e[0]),i=m.isFunction(t.match)?t.match(n):t.match,n=n.replace(i,e).replace(/ $/,"&nbsp"),o.selectNodeContents(o.startContainer),o.deleteContents();for(var r,l,c=this.el.ownerDocument.createElement("div"),p=(c.innerHTML=n,this.el.ownerDocument.createElement("div")),d=(p.innerHTML=a,this.el.ownerDocument.createDocumentFragment());r=c.firstChild;)l=d.appendChild(r);for(;r=p.firstChild;)d.appendChild(r);o.insertNode(d),o.setStartAfter(l),o.collapse(!0),s.removeAllRanges(),s.addRange(o)}},_getCaretRelativePosition:function(){var e,t=this.el.ownerDocument.getSelection().getRangeAt(0).cloneRange(),i=t.endContainer.parentNode,n=this.el.ownerDocument.createElement("span"),t=(t.insertNode(n),t.selectNodeContents(n),t.deleteContents(),setTimeout(function(){i.normalize()},0),m(n)),n=t.offset();return n.left-=this.$el.offset().left,n.top+=t.height()-this.$el.offset().top,n.lineHeight=t.height(),this.completer.$iframe&&(e=this.completer.$iframe.offset(),n.top+=e.top,n.left+=e.left,n.top-=m(this.completer.$iframe[0].contentWindow.document).scrollTop()),t.remove(),n},getTextFromHeadToCaret:function(){var e=this.el.ownerDocument.getSelection().getRangeAt(0),t=e.cloneRange();return t.selectNodeContents(e.startContainer),t.toString().substring(0,e.startOffset)}}),m.fn.textcomplete.ContentEditable=B,(b=e).extend(I.prototype,b.fn.textcomplete.ContentEditable.prototype,{_bindEvents:function(){var t=this;this.option.ckeditor_instance.on("key",function(e){e=e.data;if(t._onKeyup(e),t.completer.dropdown.shown&&t._skipSearch(e))return!1},null,null,1),this.$el.on("keyup."+this.id,b.proxy(this._onKeyup,this))}}),b.fn.textcomplete.CKEditor=I,y=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],v="undefined"!=typeof window,k=v&&null!=window.mozInnerScreenX,e.fn.textcomplete.getCaretCoordinates=function(e,t,i){var n,s,o,a;if(v)return(i=i&&i.debug||!1)&&(n=document.querySelector("#input-textarea-caret-position-mirror-div"))&&n.parentNode.removeChild(n),(n=document.createElement("div")).id="input-textarea-caret-position-mirror-div",document.body.appendChild(n),s=n.style,o=window.getComputedStyle?getComputedStyle(e):e.currentStyle,s.whiteSpace="pre-wrap","INPUT"!==e.nodeName&&(s.wordWrap="break-word"),s.position="absolute",i||(s.visibility="visible"),y.forEach(function(e){s[e]=o[e]}),k?e.scrollHeight>parseInt(o.height)&&(s.overflowY="scroll"):s.overflow="hidden",n.textContent=e.value.substring(0,t),"INPUT"===e.nodeName&&(n.textContent=n.textContent.replace(/\s/g," ")),(a=document.createElement("span")).textContent=e.value.substring(t)||".",n.appendChild(a),e={top:a.offsetTop+parseInt(o.borderTopWidth),left:a.offsetLeft+parseInt(o.borderLeftWidth)},i?a.style.backgroundColor="#aaa":document.body.removeChild(n),e;throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser")},e},"object"===i(e)&&e.exports?(i=n,e.exports=t(i)):t(jQuery)});if(null==jQuery||null==$)throw new Error("jQuery is required for SwalekhWeb to work.");var p,d,i={english:!0,hindi:!0,bengali:!0,assamese:!0,marathi:!0,punjabi:!0,gujarati:!0,odia:!0,tamil:!0,telugu:!0,malayalam:!0,kannada:!0,manipuri:!0,nepali:!0,bodo:!0,dogri:!0,konkani:!0,kashmiri:!0,maithili:!0,sanskrit:!0,sindhi:!0,santali:!0,urdu:!0},h={english:"en",hindi:"hi",bengali:"bn",assamese:"as",marathi:"mr",punjabi:"pa",gujarati:"gu",odia:"or",tamil:"ta",telugu:"te",malayalam:"ml",kannada:"kn",manipuri:"mni",urdu:"ur",nepali:"ne",bodo:"brx",dogri:"doi",konkani:"kok",kashmiri:"ks",maithili:"mai",sanskrit:"sa",sindhi:"sd",santali:"sat",french:"fr",spanish:"sp"},u=(Object.keys(i).filter(function(e){return i[e]}),$.keyboard.layouts.en={name:"english",lang:["en"],default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","‍ a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}"," {space} "],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'‍ A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}"," {space} "]},$.keyboard.layouts.hi={name:"hindi",lang:["hi"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॉ(\\)","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ऍ(!) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ऑ(|)",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ँ(X) ण(C) ‍(V) ‍(B) ळ(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.bn={name:"bengali",lang:["bn"],default:["` ১(1) ২(2) ৩(3) ৪(4) ৫(5) ৬(6) ৭(7) ৮(8) ৯(9) ০(0) - ৃ(=) {bksp}","{tab} ৌ(q) ৈ(w) া(e) ী(r) ূ(t) ব(y) হ(u) গ(i) দ(o) জ(p) ড([) ়(]) \\","‍ ো(a) ে(s) ্(d) ি(f) ু(g) প(h) র(j) ক(k) ত(l) চ(;) ট(') {enter}","{shift} ৎ(z) ং(x) ম(c) ন(v) ‍(b) ল(n) স(m) ,(,) .(.) য়(/) {shift}","{space}"],shift:["~ ্য(!) ‍(@) ্র(#) র্($) জ্ঞ(%) ত্র(^) ক্ষ(&) শ্র(*) ( ) ঃ(_) ঋ(+) {bksp}","{tab} ঔ(Q) ঐ(W) আ(E) ঈ(R) ঊ(T) ভ(Y) ঙ(U) ঘ(I) ধ(O) ঝ(P) ঢ({) ঞ(}) |",'‍ ও(A) এ(S) অ(D) ই(F) উ(G) ফ(H) ‍(J) খ(K) থ(L) ছ(:) ঠ(") {enter}',"{shift} ‍(Z) ঁ(X) ণ(C) ‍(V) ‍(B) ল(N) শ(M) ষ(<) ।(>) য(?) {shift}","{space}"]},$.keyboard.layouts.as={name:"assamese",lang:["as"],default:["` ১(1) ২(2) ৩(3) ৪(4) ৫(5) ৬(6) ৭(7) ৮(8) ৯(9) ০(0) - ৃ(=) {bksp}","{tab} ৌ(q) ৈ(w) া(e) ী(r) ূ(t) ব(y) হ(u) গ(i) দ(o) জ(p) ড([) ়(]) \\","‍ ো(a) ে(s) ্(d) ি(f) ু(g) প(h) ৰ(j) ক(k) ত(l) চ(;) ট(') {enter}","{shift} ‌(z) ং(x) ম(c) ন(v) ৱ(b) ল(n) স(m) ,(,) .(.) য়(/) {shift}","{space}"],shift:["~ ্য(!) ‍(@) ্ৰ(#) ৰ্($) জ্ঞ(%) ত্ৰ(^) ক্ষ(&) শ্ৰ(*) ( ) ঃ(_) ঋ(+) {bksp}","{tab} ঔ(Q) ঐ(W) আ(E) ঈ(R) ঊ(T) ভ(Y) ঙ(U) ঘ(I) ধ(O) ঝ(P) ঢ({) ঞ(}) |",'‍ ও(A) এ(S) অ(D) ই(F) উ(G) ফ(H) ‍(J) খ(K) থ(L) ছ(:) ঠ(") {enter}',"{shift} ৎ(Z) ঁ(X) ণ(C) ‍(V) ‍(B) ল(N) শ(M) ষ(<) ।(>) য(?) {shift}","{space}"]},$.keyboard.layouts.mr={name:"marathi",lang:["hi"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॉ(\\)","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‍(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift}","{space}"],shift:["~ ऍ(!) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ऑ(|)",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ऱ(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‍(Z) ँ(X) ण(C) ‍(V) ‍(B) ळ(N) श(M) ष(<) ।(>) य़(?) {shift}","{space}"]},$.keyboard.layouts.pa={name:"punjabi",lang:["pn"],default:["` ੧(1) ੨(2) ੩(3) ੪(4) ੫(5) ੬(6) ੭(7) ੮(8) ੯(9) ੦(0) - = {bksp}","{tab} ੌ(q) ੈ(w) ਾ(e) ੀ(r) ੂ(t) ਬ(y) ਹ(u) ਗ(i) ਦ(o) ਜ(p) ਡ([) ਼(]) \\","‍ ੋ(a) ੇ(s) ੍(d) ਿ(f) ੁ(g) ਪ(h) ਰ(j) ਕ(k) ਤ(l) ਚ(;) ਟ(') {enter}","{shift} ‍(z) ਂ(x) ਮ(c) ਨ(v) ਵ(b) ਲ(n) ਸ(m) ,(,) .(.) ਯ(/) {shift}","{space}"],shift:["~ ‍(!) ‍(@) ੍ਰ(#) ਰ੍($) ‍(%) ਤ੍ਰ(^) ‍(&) ਸ਼੍ਰ(*)  ( ) ਃ(_) ‍(+) {bksp}","{tab} ਔ(Q) ਐ(W) ਆ(E) ਈ(R) ਊ(T) ਭ(Y) ਙ(U) ਘ(I) ਧ(O) ਝ(P) ਢ({) ਞ(}) |",'‍ ਓ(A) ਏ(S) ਅ(D) ਇ(F) ਉ(G) ਫ(H) ‍(J) ਖ(K) ਥ(L) ਛ(:) ਠ(") {enter}',"{shift} ‍(Z) ਁ(X) ਣ(C) ‍(V) ‍(B) ਲ਼(N) ਸ਼(M) ‍(<) ‍(>) ?(?) {shift}","{space} "]},$.keyboard.layouts.gu={name:"gujarati",lang:["gj"],default:["` ૧(1) ૨(2) ૩(3) ૪(4) ૫(5) ૬(6) ૭(7) ૮(8) ૯(9) ૦(0) - ૃ(=) {bksp}","{tab} ૌ(q) ૈ(w) ા(e) ી(r) ૂ(t) બ(y) હ(u) ગ(i) દ(o) જ(p) ડ([) ઼(]) ૉ(\\)","‍ ો(a) ે(s) ્(d) િ(f) ુ(g) પ(h) ર(j) ક(k) ત(l) ચ(;) ટ(') {enter}","{shift} ‍(z) ં(x) મ(c) ન(v) વ(b) લ(n) સ(m) ,(,) .(.) ય(/) {shift}","{space}"],shift:["~ ઍ(!) ૅ(@) ્ર(#) ર્($) જ્ઞ(%) ત્ર(^) ક્ષ(&) શ્ર(*) ( ) ઃ(_) ઋ(+) {bksp}","{tab} ઔ(Q) ઐ(W) આ(E) ઈ(R) ઊ(T) ભ(Y) ઙ(U) ઘ(I) ધ(O) ઝ(P) ઢ({) ઞ(}) ઑ(|)",'‍ ઓ(A) એ(S) અ(D) ઇ(F) ઉ(G) ફ(H) ‍(J) ખ(K) થ(L) છ(:) ઠ(") {enter}',"{shift} ‍(Z) ઁ(X) ણ(C) ‍(V) ‍(B) ળ(N) શ(M) ષ(<) ‍(>) ‍(?) {shift}","{space}"]},$.keyboard.layouts.or={name:"odia",lang:["or"],default:[" ` ୧(1) ୨(2) ୩(3) ୪(4) ୫(5) ୬(6) ୭(7) ୮(8) ୯(9) ୦(0) - ୃ(=) {bksp}","{tab} ୌ(q) ୈ(w) ା(e) ୀ(r) ୂ(t) ବ(y) ହ(u) ଗ(i) ଦ(o) ଜ(p) ଡ([) ଼(]) \\","‍ ୋ(a) େ(s) ୍(d) ି(f) ୁ(g) ପ(h) ର(j) କ(k) ତ(l) ଚ(;) ଟ(') {enter}","{shift} ‍(z) ଂ(x) ମ(c) ନ(v) ଵ(b) ଲ(n) ସ(m) ,(,) .(.) ଯ(/) {shift}","{space}"],shift:["~ ‍(!) ‍(@) ୍ର(#) ର୍($) ଜ୍ଞ(%) ତ୍ର(^) କ୍ଷ(&) ଶ୍ର(*) ( ) ଃ(_) ଋ(+) {bksp}","{tab} ଔ(Q) ଐ(W) ଆ(E) ଈ(R) ଊ(T) ଭ(Y) ଙ(U) ଘ(I) ଧ(O) ଝ(P) ଢ({) ଞ(}) ‍(|)",'‍ ଓ(A) ଏ(S) ଅ(D) ଇ(F) ଉ(G) ଫ(H) ‍(J) ଖ(K) ଥ(L) ଛ(:) ଠ(") {enter}',"{shift} ‍(Z) ଁ(X) ଣ(C) ‍(V) ‍(B) ଳ(N) ଶ(M) ଷ(<) ।(>) ୟ(?) {shift}","{space} "]},$.keyboard.layouts.ta={name:"tamil",lang:["ta"],default:["ொ(`) ௧(1) ௨(2) ௩(3) ௪(4) ௫(5) ௬(6) ௭(7) ௮(8) ௯(9) ௦(0) - = {bksp}","{tab} ௌ(q) ை(w) ா(e) ீ(r) ூ(t) ‍(y) ஹ(u) ‍(i) ‍(o) ஜ(p) ‍([) ‍(]) \\","‍ ோ(a) ே(s) ்(d) ி(f) ு(g) ப(h) ர(j) க(k) த(l) ச(;) ட(') {enter}","{shift} ெ(z) ‍(x) ம(c) ந(v) வ(b) ல(n) ஸ(m) ,(,) .(.) ய(/) {shift}","{space}"],shift:["ஒ(~) ‍(!) ‍(@) ‍(#) ர்($) ‍(%) த்ர(^) க்ஷ(&) ஶ்ர(*) ( ) _ ஃ(+) {bksp}","{tab} ஔ(Q) ஐ(W) ஆ(E) ஈ(R) ஊ(T) ‍(Y) ங(U) ‍(I) ‍(O) ‍(P) ‍({) ஞ(}) ‍(|)",'‍ ஓ(A) ஏ(S) அ(D) இ(F) உ(G) ‍(H) ற(J) ‍(K) ‍(L) ‍(:) ‍(") {enter}',"{shift} எ(Z) ‍(X) ண(C) ன(V) ழ(B) ள(N) ‍(M) ஷ(<) ‍(>) ?(?) {shift}","{space}"]},$.keyboard.layouts.te={name:"telugu",lang:["te"],default:["ొ(`) ౧(1) ౨(2) ౩(3) ౪(4) ౫(5) ౬(6) ౭(7) ౮(8) ౯(9) ౦(0) - ృ(=) {bksp}","{tab} ౌ(q) ై(w) ా(e) ీ(r) ూ(t) బ(y) హ(u) గ(i) ద(o) జ(p) డ([) ‍(]) \\","‍ ో(a) ే(s) ్(d) ి(f) ు(g) ప(h) ర(j) క(k) త(l) చ(;) ట(') {enter}","{shift} ె(z) ం(x) మ(c) న(v) వ(b) ల(n) స(m) ,(,) .(.) య(/) {shift}","{space}"],shift:["ఒ(~) ‍(!) ‍(@) ్ర(#) ‍($) జ్ఞ(%) త్ర(^) క్ష(&) శ్ర(*) ( ) ಃ(_) ఋ(+) {bksp}","{tab} ఔ(Q) ఐ(W) ఆ(E) ఈ(R) ఊ(T) భ(Y) ఙ(U) ఘ(I) ధ(O) ఝ(P) ఢ({) ఞ(}) ‍(|)",'‍ ఓ(A) ఏ(S) అ(D) ఇ(F) ఉ(G) ఫ(H) ‍(J) ఖ(K) థ(L) ఛ(:) ఠ(") {enter}',"{shift} ‌(Z) ఎ(X) ణ(C) ‍(V) ‍(B) ళ(N) శ(M) ష(<) ‍(>) ?(?) {shift}","{space}"]},$.keyboard.layouts.ml={name:"malayalam",lang:["ma"],default:["ൊ(`) ൧(1) ൨(2) ൩(3) ൪(4) ൫(5) ൬(6) ൭(7) ൮(8) ൯(9) ൦(0) - ൃ(=) {bksp}","{tab} ൗ(q) ൈ(w) ാ(e) ീ(r) ൂ(t) ബ(y) ഹ(u) ഗ(i) ദ(o) ഇ(p) ഡ([) ‍(]) ർ(\\)","‍ ോ(a) േ(s) ്(d) ി(f) ു(g) പ(h) ര(j) ക(k) ത(l) ച(;) ട(') {enter}","{shift} െ(z) ം(x) മ(c) ന(v) വ(b) ല(n) സ(m) ,(,) .(.) യ(/) {shift}","{space}"],shift:["ഒ(~) ‍(!) ‍(@) ്ര(#) ര്($) ജ്ഞ(%) ത്ര(^) ക്ഷ(&) ൾ(*)  ( ) ഃ(_) ഋ(+) {bksp}","{tab} ഔ(Q) ഐ(W) ആ(E) ഈ(R) ഊ(T) ഭ(Y) ങ(U) ഘ(I) ധ(O) ഝ(P) ഢ({) ഞ(}) ‍(|)",'‍ ഓ(A) ഏ(S) അ(D) ഇ(F) ഉ(G) ഫ(H) റ(J) ഖ(K) ഥ(L) ഛ(:) ഠ(") {enter}',"{shift} എ(Z) ൺ(X) ണ(C) ൻ(V) ഴ(B) ള(N) ശ(M) ഷ(<) ൽ(>) ?(?) {shift}","{space}"]},$.keyboard.layouts.kn={name:"kannada",lang:["ka"],default:["ೊ(`) ೧(1) ೨(2) ೩(3) ೪(4) ೫(5) ೬(6) ೭(7) ೮(8) ೯(9) ೦(0) - ೃ(=) {bksp}","{tab} ೌ(q) ೈ(w) ಾ(e) ೀ(r) ೂ(t) ಬ(y) ಹ(u) ಗ(i) ದ(o) ಜ(p) ಡ([) ‍(]) \\","‍ ೋ(a) ೇ(s) ್(d) ಿ(f) ು(g) ಪ(h) ರ(j) ಕ(k) ತ(l) ಚ(;) ಟ(') {enter}","{shift} ೆ(z) ಂ(x) ಮ(c) ನ(v) ವ(b) ಲ(n) ಸ(m) ,(,) .(.) ಯ(/) {shift}","{space}"],shift:["ಒ(~) ‍(!) ‍(@) ್ರ(#) ರ್($) ಜ್ಞ(%) ತ್ರ(^) ಕ್ಷ(&) ಶ್ರ(*) ( ) ಃ(_) ಋ(+) {bksp}","{tab} ಔ(Q) ಐ(W) ಆ(E) ಈ(R) ಊ(T) ಭ(Y) ಙ(U) ಘ(I) ಧ(O) ಝ(P) ಢ({) ಞ(}) ‍(|)",'‍ ಓ(A) ಏ(S) ಅ(D) ಇ(F) ಉ(G) ಫ(H) ‍(J) ಖ(K) ಥ(L) ಛ(:) ಠ(") {enter}',"{shift} ಎ(Z) ‍(X) ಣ(C) ‍(V) ‍(B) ಳ(N) ಶ(M) ಷ(<) ‍(>) ?(?) {shift}","{space}"]},$.keyboard.layouts.mni={name:"manipuri",lang:["mni"],default:["` ১(1) ২(2) ৩(3) ৪(4) ৫(5) ৬(6) ৭(7) ৮(8) ৯(9) ০(0) - ৃ(=) {bksp}","{tab} ৌ(q) ৈ(w) া(e) ী(r) ূ(t) ব(y) হ(u) গ(i) দ(o) জ(p) ড([) ়(]) \\","ো(a) ে(s) ্(d) ি(f) ু(g) প(h) র(j) ক(k) ত(l) চ(;) ট(') {enter}","{shift} ‌(z) ং(x) ম(c) ন(v) ৱ(b) ল(n) স(m) ,(,) .(.) য়(/) {shift}","{space}"],shift:["~ ্য(!) ‍(@) ্র(#) র্($) জ্ঞ(%) ত্র(^) ক্ষ(&) শ্র(*) ( ) ঃ(_) ঋ(+) {bksp}","{tab} ঔ(Q) ঐ(W) আ(E) ঈ(R) ঊ(T) ভ(Y) ঙ(U) ঘ(I) ধ(O) ঝ(P) ঢ({) ঞ(}) |",'ও(A) এ(S) অ(D) ই(F) উ(G) ফ(H) ‍(J) খ(K) থ(L) ছ(:) ঠ(") {enter}',"{shift} ‌(Z) ঁ(X) ণ(C) ‍(V) ‍(B) ‍(N) শ(M) ষ(<) ।(>) য(?) {shift}","{space}"]},$.keyboard.layouts.ne={name:"neplai",lang:["ne"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) \\","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ‍(!) ‍(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) |",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ऱ(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ँ(X) ण(C) ‍(V) ‍(B) ळ(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.brx={name:"bodo",lang:["brx"],default:["ॊ(`) १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) \\","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["ऒ(~) ‍(!) ‍(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) |",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ँ(X) ण(C) ‍(V) ‍(B) ‍(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.doi={name:"dogri",lang:["doi"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) \\","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ‍(!) ‍(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) |",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ॐ(X) ण(C) ‍(V) ‍(B) ‍(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.kok={name:"konkani",lang:["kok"],default:["`(`) १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॉ(\\)","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‍(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~(~) ॲ(!) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ऑ(|)",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ऱ(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‍(Z) ँ(X) ण(C) ‍(V) ‍(B) ळ(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.ks={name:"kashmiri",lang:["ks"],default:["ॊ(`) १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॉ(\\)","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ॆ(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["ऒ(~) ॲ(!) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ऑ(|)",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ऎ(Z) ँ(X) ण(C) ‍(V) ‍(B) ‍(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.mai={name:"maithili",lang:["mai"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) \\","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ‍(!) ‍(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) |",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ँ(X) ण(C) ‍(V) ‍(B) ‍(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.sa={name:"sanskrit",lang:["sa"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) ॄ(\\)","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ‍(!) ॅ(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) ॠ(|)",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ँ(X) ण(C) ‍(V) ‍(B) ळ(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.sd={name:"sindhi",lang:["sd"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - ृ(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) \\","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ‍(!) ‍(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) _(_) ऋ(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) |",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ॻ(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ॐ(X) ण(C) ॾ(V) ॿ(B) ॼ(N) श(M) ष(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.sat={name:"santhali",lang:["sat"],default:["` १(1) २(2) ३(3) ४(4) ५(5) ६(6) ७(7) ८(8) ९(9) ०(0) - =(=) {bksp}","{tab} ौ(q) ै(w) ा(e) ी(r) ू(t) ब(y) ह(u) ग(i) द(o) ज(p) ड([) ़(]) \\","‍ ो(a) े(s) ्(d) ि(f) ु(g) प(h) र(j) क(k) त(l) च(;) ट(') {enter}","{shift} ‌(z) ं(x) म(c) न(v) व(b) ल(n) स(m) ,(,) .(.) य(/) {shift} ","{space}"],shift:["~ ‍(!) ‍(@) ्र(#) र्($) ज्ञ(%) त्र(^) क्ष(&) श्र(*)  ( ) ः(_) +(+) {bksp}","{tab} औ(Q) ऐ(W) आ(E) ई(R) ऊ(T) भ(Y) ङ(U) घ(I) ध(O) झ(P) ढ({) ञ(}) |",'‍ ओ(A) ए(S) अ(D) इ(F) उ(G) फ(H) ‍(J) ख(K) थ(L) छ(:) ठ(") {enter}',"{shift} ‌(Z) ँ(X) ण(C) ‍(V) ‍(B) ‍(N) ‍(M) ‍(<) ।(>) ?(?) {shift} ","{space}"]},$.keyboard.layouts.ur={name:"urdu",lang:["ur"],default:["‌(`) 1(1) ۲(2) ۳(3) ۴(4) ۵(5) ۶(6) ۷(7) ۸(8) ۹(9) ۰(0) - (=) {bksp}","{tab} ق(q) و(w) ع(e) ر(r) ت(t) ے(y) ء(u) ی(i) ہ(o) پ(p) [([) ](]) \\","‍ ا(a) س(s) د(d) ف(f) گ(g) ح(h) ج(j) ک(k) ل(l) ؛(;) (') {enter}","{shift} ز(z) ش(x) چ(c) ظ(v) ب(b) ن(n) م(m) ،(,) ۔(.) (/) {shift}"," {alt} {space} {alt}"],shift:["`(`) 1(1) 2(2) 3(3) 4(4) 5(5) 6(6) 7(7) 8(8) 9(9) 0(0) - (=) {bksp}","{tab} ْ(Q) ّ(W) ٰ(E) ڑ(R) ٹ(T) َ(Y) ئ(U) ِ(I) ۃ(O) ُ(P) {([) }(]) \\",'‍ آ(A) ص(S) ڈ(D) ‌(F) غ(G) ھ(H) ض(J) خ(K) ‌(L) :(:) (") {enter}',"{shift} ذ(Z) ژ(X) ث(C) ظ(V) ‌(B) ں(N) ٘(M) ‌(,) ,(.) ؟(/) {shift}"," {alt} {space} {alt}"],alt:["‌(`) !(1) @(2) #(3) ‌(4) %(5) ‌(6) &(7) *(8) ((9) )(0) ‌(-) ‌(=) {bksp}","{tab} ‌(Q) ؂(W) ٖ(E) ؓ(R) ٓ(T) ؁(Y) ٔ(U) ؑ(I) ‌(O) ٗ(P) ‌([) ‌(]) \\",'ﷲ(A) ؐ(S) ﷺ(D) ‌(F) ‌(G) ؒ(H) ﷻ(J) ‌(K) ‌(L) ‌(:) ‌(") {enter}',"{shift} ؏(Z) ؎(X) ؃(C) ‌(V) ﷽(B) ؀(N) ‌(M) <(,) >(.) ‌(/) {shift}"," {alt} {space} {alt}"]},null),s=null,o=(A(jQuery||$),function(e){s=$(e.target);var t=$(e.target).getkeyboard(),e=t.$keyboard;e.attr("anuvadak-no-localization","true"),e.prepend('<div class="drag_handle"><div class="ui-keyboard-toolbar"  id="drag-handle"/><div class="ui-kb-tools-2" style="position: relative"><a id="kb-switch-to-phonetic" style="position: relative"><span>Switch to phonetic mode</span>Phonetic</a></div></div>'),$("#ui-kb-lang-title").text(t.options.layout&&t.options.layout.toUpperCase()),e.draggable({handle:"#drag-handle"}),$("#ui-kb-close-btn").off().on("click",function(e){e.preventDefault(),t.accept(),t.close()}),$(".ui-lang-item").off().on("click",function(){var e=$(this).text().trim().toLowerCase(),t=$(this).closest(".ui-keyboard").getkeyboard(),e=h[e]||e;t.$el.data("layout",e),t.options.layout=e,t.redraw(),c(),t.$el.trigger("lang_changed",e)}),$("#kb-switch-to-phonetic").off().on("click",function(e){if(e.preventDefault(),!s)return!1;s.getkeyboard().destroy(),l(s,s.data()),u=s,s=null,u.focus()})}),a=function(e){$(e.target).getkeyboard();c()},r=null,r=function(e,t,i){t.mode="keyboard",e.data(t),e.attr("data-indic-input-mode","keyboard"),setTimeout(function(){e.trigger("mode_changed","keyboard"),e.trigger("lang_changed",t.layout)},10);var n={layout:t.layout,stayOpen:!1,usePreview:!1,autoAccept:!0,position:!1,beforeVisible:o,visible:a};e.keyboard(n).addTyping({showTyping:!0,delay:90})},l=null;function c(){var e=$("#ui-kb-lang-select"),t=e.height();e.data({height:t}).css({height:"28px",opacity:1}).off().on("mouseenter",function(){var e=$(this).data().height;$(this).scrollTop(0).stop().animate({height:e},200)}).on("mouseleave",function(){$(this).scrollTop(0).stop().animate({height:"28px"},200)})}function A(s){s("<style>@font-face {\n  font-family: \"kb-icon\";\n  src: url(data:application/octet-stream;base64,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AyWwAiVHI0cjYbAAVFguIDwjIRuwAiWwAiVHI0cjYSCwBSWwBCVHI0cjYbAGJbAFJUmwAiVhuQgACABjYyMgWGIbIVljuAQAYiCwAFBYsEBgWWawAWNgIy4jICA8ijgjIVktsDossAAWILAIQyAuRyNHI2EgYLAgYGawAmIgsABQWLBAYFlmsAFjIyAgPIo4LbA7LCMgLkawAiVGUlggPFkusSsBFCstsDwsIyAuRrACJUZQWCA8WS6xKwEUKy2wPSwjIC5GsAIlRlJYIDxZIyAuRrACJUZQWCA8WS6xKwEUKy2wPiywNSsjIC5GsAIlRlJYIDxZLrErARQrLbA/LLA2K4ogIDywBCNCijgjIC5GsAIlRlJYIDxZLrErARQrsARDLrArKy2wQCywABawBCWwBCYgLkcjRyNhsAlDKyMgPCAuIzixKwEUKy2wQSyxCAQlQrAAFrAEJbAEJSAuRyNHI2EgsAQjQrAJQysgsGBQWCCwQFFYswIgAyAbswImAxpZQkIjIEewBEOwAmIgsABQWLBAYFlmsAFjYCCwASsgiophILACQ2BkI7ADQ2FkUFiwAkNhG7ADQ2BZsAMlsAJiILAAUFiwQGBZZrABY2GwAiVGYTgjIDwjOBshICBGI0ewASsjYTghWbErARQrLbBCLLA1Ky6xKwEUKy2wQyywNishIyAgPLAEI0IjOLErARQrsARDLrArKy2wRCywABUgR7AAI0KyAAEBFRQTLrAxKi2wRSywABUgR7AAI0KyAAEBFRQTLrAxKi2wRiyxAAEUE7AyKi2wRyywNCotsEgssAAWRSMgLiBGiiNhOLErARQrLbBJLLAII0KwSCstsEossgAAQSstsEsssgABQSstsEwssgEAQSstsE0ssgEBQSstsE4ssgAAQistsE8ssgABQistsFAssgEAQistsFEssgEBQistsFIssgAAPistsFMssgABPistsFQssgEAPistsFUssgEBPistsFYssgAAQCstsFcssgABQCstsFgssgEAQCstsFkssgEBQCstsFossgAAQystsFsssgABQystsFwssgEAQystsF0ssgEBQystsF4ssgAAPystsF8ssgABPystsGAssgEAPystsGEssgEBPystsGIssDcrLrErARQrLbBjLLA3K7A7Ky2wZCywNyuwPCstsGUssAAWsDcrsD0rLbBmLLA4Ky6xKwEUKy2wZyywOCuwOystsGgssDgrsDwrLbBpLLA4K7A9Ky2waiywOSsusSsBFCstsGsssDkrsDsrLbBsLLA5K7A8Ky2wbSywOSuwPSstsG4ssDorLrErARQrLbBvLLA6K7A7Ky2wcCywOiuwPCstsHEssDorsD0rLbByLLMJBAIDRVghGyMhWUIrsAhlsAMkUHiwARUwLQBLuADIUlixAQGOWbABuQgACABjcLEABUKyAAEAKrEABUKzCgIBCCqxAAVCsw4AAQgqsQAGQroCwAABAAkqsQAHQroAQAABAAkqsQMARLEkAYhRWLBAiFixA2REsSYBiFFYugiAAAEEQIhjVFixAwBEWVlZWbMMAgEMKrgB/4WwBI2xAgBEAAA=);\n  font-style: normal;\n  font-weight: normal; }\n\n.ui-kb-icon {\n  font-family: \"kb-icon\";\n  font-style: normal; }\n\n#kb-switch-to-phonetic {\n  color: rgba(0, 0, 0, 0.3);\n  transition: all .3s; }\n  #kb-switch-to-phonetic:hover {\n    color: black; }\n\n.close {\n  left: 90px !important;\n  top: -5px;\n  position: relative;\n  max-width: 20px !important;\n  height: 30px; }\n\n#ui-kb-close-btn {\n  color: rgba(0, 0, 0, 0.3);\n  transition: all .3s; }\n  #ui-kb-close-btn:hover {\n    color: black; }\n\n#ui-kb-close-btn {\n  position: relative;\n  left: -80px;\n  font-size: 35px;\n  top: -6px;\n  color: black; }\n\n#ui-kb-close-btn:hover span {\n  opacity: 1; }\n\n#ui-kb-close-btn span {\n  position: absolute;\n  white-space: nowrap;\n  right: 2em;\n  top: 10px;\n  background: #333;\n  color: white;\n  padding: 0px 0.5em;\n  border-radius: 3px;\n  pointer-events: none;\n  transition: all .3s;\n  opacity: 0;\n  font-size: large; }\n\n#ui-kb-lang-select {\n  position: absolute;\n  padding: 0;\n  z-index: 1;\n  overflow: hidden;\n  list-style: none;\n  max-height: 200px;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  background: #FFF;\n  opacity: 0;\n  border: solid 1px transparent;\n  cursor: pointer;\n  top: -15px !important;\n  left: 0px; }\n  #ui-kb-lang-select:hover {\n    border: solid 1px #EAEAEA;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    overflow-y: auto;\n    top: -15px; }\n  #ui-kb-lang-select > li {\n    padding: 5px 12px;\n    transition: all .3s;\n    text-align: left; }\n    #ui-kb-lang-select > li:not(.lang-title):hover {\n      background-color: #F5F5F5; }\n\n#kb-switch-to-phonetic:hover span {\n  opacity: 1; }\n\n#kb-switch-to-phonetic span {\n  position: absolute;\n  white-space: nowrap;\n  right: 2em;\n  background: #333;\n  color: white;\n  padding: 0 .5em;\n  border-radius: 3px;\n  pointer-events: none;\n  transition: all .3s;\n  opacity: 0; }\n\n#kb-switch-container {\n  display: flex;\n  justify-content: flex-end; }\n  #kb-switch-container > button {\n    border: none;\n    font-size: 1.3em;\n    background: white;\n    padding: 0;\n    opacity: .3;\n    transition: all .3s;\n    appearance: none;\n    cursor: pointer;\n    outline: none; }\n    #kb-switch-container > button:hover {\n      opacity: 1; }\n\n.drag_handle {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0px 20px; }\n\n.ui-keyboard-toolbar {\n  display: flex;\n  align-items: center;\n  justify-content: end;\n  height: 20px;\n  margin: .5em;\n  cursor: move; }\n  .ui-keyboard-toolbar a {\n    cursor: pointer; }\n  .ui-keyboard-toolbar > div {\n    padding: 0 .5em; }\n  .ui-keyboard-toolbar > div:nth-child(2) {\n    flex-grow: 1; }\n  .ui-keyboard-toolbar #ui-kb-lang-title {\n    color: #AAA;\n    font-weight: bold; }\n  .ui-keyboard-toolbar #kb-switch-to-phonetic {\n    padding: 0 .5em; }\n\n.ui-keyboard {\n  width: 100%;\n  max-width: 600px;\n  min-width: 350px;\n  padding-bottom: .5em;\n  user-select: none;\n  text-align: center;\n  background-color: white;\n  border: solid 1px #EAEAEA;\n  border-radius: 2px;\n  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);\n  top: auto;\n  right: 10px;\n  bottom: 10px;\n  position: fixed;\n  width: 100%;\n  height: 210px;\n  z-index: 99999; }\n  @media all and (max-width: 915px) {\n    .ui-keyboard {\n      max-width: 560px; } }\n  @media all and (max-width: 700px) {\n    .ui-keyboard {\n      width: 350px; } }\n  .ui-keyboard button.ui-keyboard-button {\n    position: relative;\n    display: inline-block;\n    margin: 0 4px 5px 0;\n    padding: 0;\n    border-radius: 5px;\n    width: 2em;\n    height: 2em;\n    vertical-align: top;\n    font-size: 14px;\n    background-color: #FAFAFA;\n    border: solid 1px #DDD; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-space {\n      width: 20em; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-0, .ui-keyboard button.ui-keyboard-button.ui-keyboard-enter {\n      width: 2em; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-0 .ui-keyboard-text, .ui-keyboard button.ui-keyboard-button.ui-keyboard-enter .ui-keyboard-text {\n        font-size: 10px; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-shift {\n      width: 3em; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-shift .ui-keyboard-text {\n        font-size: 10px; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-tab {\n      font-size: 14px;\n      width: 50px; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-tab .ui-keyboard-text {\n        font-size: small; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-accept {\n      width: 4em; }\n    .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp {\n      width: 3em;\n      text-align: center; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp:before {\n        font-family: 'kb-icon';\n        content: '\\e804';\n        position: relative;\n        font-size: 1.5em; }\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp > span {\n        display: none; }\n    .ui-keyboard button.ui-keyboard-button.ui-state-hover {\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);\n      color: #333; }\n    .ui-keyboard button.ui-keyboard-button.ui-state-active {\n      background-color: #DDD;\n      border: solid 1px #DDD; }\n    .ui-keyboard button.ui-keyboard-button:active {\n      box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.1) inset; }\n      .ui-keyboard button.ui-keyboard-button:active:after {\n        color: white; }\n    @media all and (max-width: 915px) {\n      .ui-keyboard button.ui-keyboard-button {\n        font-size: 14px; } }\n    @media all and (max-width: 700px) {\n      .ui-keyboard button.ui-keyboard-button {\n        margin: 4px 4px 5px 0 !important;\n        border-radius: 3px; }\n        .ui-keyboard button.ui-keyboard-button.ui-keyboard-tab {\n          font-size: 14px;\n          width: 32px;\n          height: 24px; }\n          .ui-keyboard button.ui-keyboard-button.ui-keyboard-tab .ui-keyboard-text {\n            font-size: small; }\n        .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp {\n          width: 2.5em;\n          height: 24px;\n          text-align: center; }\n          .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp:before {\n            font-family: 'kb-icon';\n            content: '\\e804';\n            position: relative;\n            font-size: 1.5em; }\n          .ui-keyboard button.ui-keyboard-button.ui-keyboard-bksp > span {\n            display: none; }\n        .ui-keyboard button.ui-keyboard-button.ui-keyboard-shift {\n          width: 2.3em;\n          height: 24px; }\n          .ui-keyboard button.ui-keyboard-button.ui-keyboard-shift .ui-keyboard-text {\n            font-size: 10px; }\n        .ui-keyboard button.ui-keyboard-button.ui-keyboard-enter {\n          width: 2em;\n          height: 24px; }\n          .ui-keyboard button.ui-keyboard-button.ui-keyboard-enter .ui-keyboard-text {\n            font-size: 10px; } }\n    @media all and (max-width: 700px) {\n      .ui-keyboard button.ui-keyboard-button.ui-keyboard-space {\n        width: 12em;\n        height: 24px; } }\n    @media all and (max-width: 700px) {\n      .ui-keyboard button.ui-keyboard-button:not(.ui-keyboard-actionkey) {\n        width: auto;\n        min-width: 1.6em;\n        font-size: 11px;\n        border-radius: 3px; } }\n\n.ui-keyboard-keyset .ui-keyboard-button {\n  position: relative; }\n\n.vanish {\n  display: none !important; }\n\n#drag-handle {\n  max-height: 20px;\n  width: 100%;\n  transition: max-height 0.4s; }\n\n#drag-handle.active {\n  max-height: 45px;\n  transition: max-height 0.4s; }\n\n.textcomplete-header {\n  background-color: #fff !important;\n  color: #333 !important;\n  visibility: hidden;\n  display: none; }\n\n.textcomplete-dropdown {\n  background-color: white;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n  border-radius: 3px;\n  overflow: hidden;\n  transition: all .2s;\n  list-style: none;\n  padding: 0;\n  margin: 0; }\n  .textcomplete-dropdown li {\n    padding: 5px 10px;\n    min-width: 8em;\n    color: black; }\n    .textcomplete-dropdown li:first-child {\n      border-top: none; }\n    .textcomplete-dropdown li:hover, .textcomplete-dropdown li.active {\n      background-color: #3498db;\n      color: white;\n      cursor: default; }\n      .textcomplete-dropdown li:hover a, .textcomplete-dropdown li.active a {\n        cursor: inherit; }\n\n@media all and (max-width: 915px) {\n  .close {\n    left: 80px; }\n  .bksp {\n    left: 480px; }\n  .ui-kb-tools-2 {\n    right: -9px; } }\n\n@media all and (max-width: 700px) {\n  .ui-kb-suggestions {\n    position: absolute;\n    left: 0px;\n    width: 300px;\n    font-size: 12px; }\n  .close {\n    left: 309px; }\n  .ui-kb-tools-2 {\n    right: -233px; }\n  .bksp {\n    left: 314px;\n    top: 38px;\n    width: 9px; }\n  .bksp button {\n    text-align: center;\n    position: relative;\n    width: 25px;\n    left: -8px;\n    top: 2px;\n    font-size: 1.1em;\n    height: 22px;\n    border: none;\n    background-color: #FAFAFA;\n    border: solid 1px #DDD;\n    border-radius: 5px;\n    cursor: pointer; }\n  .bksp button i {\n    font-family: \"kb-icon\";\n    font-style: normal;\n    position: relative;\n    top: -5px;\n    left: -4px; }\n  .kb_dropbtn {\n    background-color: #616161c8;\n    color: white !important;\n    height: 26px;\n    width: 50px;\n    padding: 7px;\n    font-size: 12px;\n    border: none;\n    border-radius: 8px;\n    position: relative;\n    left: -8px;\n    top: 8px; }\n  .ui-kb-tools-2 {\n    position: absolute;\n    height: 25px;\n    width: 30px;\n    top: 187px;\n    right: -260px;\n    z-index: 1; }\n  #kb-switch-to-phonetic {\n    position: relative;\n    cursor: pointer;\n    width: 25px;\n    top: 1px;\n    right: 3px;\n    height: 20px;\n    background-color: #616161;\n    border-radius: 4px; } }\n</style>").appendTo(s("head")),s(document).on("click","#kb-switch-to-kb",function(){var e=u;if(!e)return!1;e.trigger("change_mode","keyboard"),e.trigger("reveal_keyboard")}),s.fn.indicInput=function(e){for(var t,i=0;i<s(this).length;i++){var n=s(this).eq(i);n.attr("data-indic-input-mode")||("keyboard"!=(t=s.extend({apikey:null,appid:null,orgName:null,domain:1,mode:"phonetic",layout:"hi",noOfsuggestions:5,showLangSelect:!0,apiEndpoint:"https://swalekht13n.reverieinc.com/transliteration"},e)).mode&&"phonetic"!=t.mode?console.warn("Invalid option parameter value specified for mode. Possible values are `keyboard` and `phonetic`."):t.apikey&&t.appid?(n.data(t),n.attr("data-indic-input-mode",t.mode),"phonetic"==t.mode&&l(n,t,e),"keyboard"==t.mode&&r(n,t,e)):console.warn("Missing option parameters apikey, appid or orgName, which are required for phonetic mode."))}return this.on("change_lang",function(e,t){var i,e=s(e.target);return!!e.attr("data-indic-input-mode")&&((i=e.data()).layout!=t&&(i.layout=t,e.data(i),"keyboard"==i.mode&&((i=e.getkeyboard()).options.layout=t,i.redraw(),c()),void e.trigger("lang_changed",t)))}),this.on("change_mode",function(e,t){var i,e=s(e.target);return!!e.attr("data-indic-input-mode")&&((i=e.data()).mode!=t&&("keyboard"!=t&&"phonetic"!=t?(console.warn("Invalid mode specified '"+t+"'"),!1):("phonetic"==(i.mode=t)&&(e.getkeyboard().destroy(),l(e,i),e.data(i)),void("keyboard"==t&&(e.textcomplete("destroy"),r(e,i),e.data(i))))))}),this.on("reveal_keyboard",function(e){e=s(e.target);"keyboard"==e.attr("data-indic-input-mode")&&e.getkeyboard().reveal()}),this}}return l=function(l,e,t){e.mode="phonetic",l.data(e),l.attr("data-indic-input-mode","phonetic"),setTimeout(function(){l.trigger("mode_changed","phonetic"),l.trigger("lang_changed",e.layout)},10);var c=new RegExp(/\d+/gm);l.textcomplete([{match:/\b(\w{1,})$/,completeOnSpace:!0,search:function(t,i){p=t;var n,e,s,o,a,r=(u=l).data().layout;i([t]),"en"===r?$(".textcomplete-dropdown").addClass("vanish"):$(".textcomplete-dropdown").removeClass("vanish"),window.localStorage&&((n=window.localStorage.getItem("rev_t13n_dict"))||(window.localStorage.setItem("rev_t13n_dict",JSON.stringify({})),n=JSON.stringify({})),(n=JSON.parse(n))[t]&&n[t][r]||(n[t]={},n[t][r]={value:"",freq:0},window.localStorage.setItem("rev_t13n_dict",JSON.stringify(n))),20<n[t][r].freq?i([n[t][r].value]):(e=(r=l.data()).apikey,s=r.appid,r.orgName,o=r.layout,r.noOfSuggestions,a=r.apiEndpoint,r.domain,r.appName,r.convertNumber,i([t]),a="/"!=a.slice(-1)?a+"/":a,c.test(t),$.ajax({url:a,type:"post",headers:{"rev-api-key":e,"rev-app-id":s,src_lang:"en",tgt_lang:h[o]||o,"rev-appname":"transliteration",domain:1,cnt_lang:h[o]||o},data:JSON.stringify({data:[t],noOfSuggestions:5,isBulk:!0,ignoreTaggedEntities:!0}),contentType:"application/json",crossOrigin:!0,dataType:"json"}).then(function(e){e.responseList[0].outString,p===t&&(d=o,n[t][d].value&&e.responseList[0].outString.indexOf(n[t][d].value)&&(e.responseList[0].outString.splice(e.responseList[0].outString.indexOf(n[t][d].value),1),e.responseList[0].outString.unshift(n[t][d].value)),e.responseList[0].outString.push(t),i(e.responseList[0].outString))}).fail(function(e){console.log(e),console.log("Transliteration API failure..")})))},index:0,replace:function(e){var t=p,i=e,n=d,s=JSON.parse(window.localStorage.getItem("rev_t13n_dict")),i=(s[t][n].value===i?s[t][n].freq+=1:(s[t][n].value=i,s[t][n].freq=1),window.localStorage.setItem("rev_t13n_dict",JSON.stringify(s)),l.data());i.apikey,i.appid,i.layout,i.noOfSuggestions;return e+" "}}],{header:function(){return'<div id="kb-switch-container">\n         <button id="kb-switch-to-kb" class="ui-kb-icon">\n             '+String.fromCharCode(59394)+"\n         </button>\n     </div>"}})},A}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
